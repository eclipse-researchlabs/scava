@gmf
@namespace(uri="org.eclipse.scava.crossflow", prefix="cf")
package crossflow;

import "platform:/resource/org.eclipse.scava.crossflow.language/model/components.ecore";

@gmf.diagram(onefile="true")
class Workflow {
  attr String name;
  val Stream[*] streams;
  val Task[*] tasks;
  val Type[*] types;
  val Field[*] parameters;
  val Language[*] languages;
  val Serializer serializer;
}

@gmf.node(figure="ellipse", label="name", label.icon="false", color="255,224,224")
abstract class Stream {
  attr String name;
  attr boolean many = false;

  @gmf.link
  ref Type type;
  
  @gmf.link(target.decoration="filledclosedarrow")
  ref Task[*]#input inputOf;
  
  ref Task[*]#output outputOf;
}

class Topic extends Stream {
}

class Queue extends Stream {
}

@gmf.node(label="name", label.icon="false", color="255,255,181")
class Task {
  attr String name;

  ref Stream[*]#inputOf input;

  @gmf.link(target.decoration="filledclosedarrow")
  ref Stream[*]#outputOf output;
  
  attr Boolean masterOnly = "false";
  attr Boolean parallel;
  attr Boolean cached;
  attr Boolean multipleOutputs = "false";
  
  attr String impl;
  
  ref Field[*] parameters;
  
  ref Language[*] languages;  

  ref Type[*] configurations; 
}

@gmf.node(label="name", label.icon="false", figure="polygon", polygon.x="0 10 11 10 0", polygon.y="0 0 2 4 4", color="201,231,183")
class Source extends Task {
}

class CsvSource extends Source {
  attr String fileName;
}

@gmf.node(label="name", label.icon="false", figure="polygon",polygon.x="0 10 10 5 0",polygon.y="0 0 4 6 4", color="201,231,183")
class Sink extends Task {
}

class CsvSink extends Sink {
  attr String fileName;
}

@gmf.node(label="name")
class CommitmentTask extends Task {
	attr int commitAfter = 1; 
}

@gmf.node(label="name")
class OpinionatedTask extends Task {
}

@gmf.node(label="name", color="245,222,170")
class ScriptedTask extends Task {
	attr String scriptingLanguage;
	@emf.gen(propertyMultiLine="true")
	attr String script;
	
 	@gmf.compartment(layout="list",collapsible="false")
  	val Field[*] outputVariables;
}

@gmf.node(label="name")
class ReusableComponent extends Task {
	ref crossflowComponents.Component[1] component;
}

@gmf.node(label="name", figure ="rectangle", label.icon="false", color="181,255,255")
class Type {
  attr String name;
  attr String impl;

  @gmf.link
  ref Type extending;

  @gmf.compartment(layout="list",collapsible="false")
  val Field[*] fields;
}

abstract class Field {
  attr String name;
  attr boolean many = false;
}

@gmf.node(label="name,type", figure="rectangle", label.pattern="{0}:{1}", label.icon="false", color="181,255,255")
class DataField extends Field {
  attr String type = "String";
}

@gmf.node(label="name", figure="rectangle", label.icon="false", color="181,255,255")
class EnumField extends Field {
  attr String[*] values;
}

@gmf.node(label="name", figure ="rectangle", label.icon="false", color="204,204,255")
class Language {
  attr String name;
  attr String ~package;
  attr String outputFolder;
  attr String genOutputFolder;

  @gmf.compartment(layout="list",collapsible="false", color="204,204,255")
  val Parameter[*] parameters;
}

@gmf.node(label="name,value", figure="rectangle", label.pattern="{0}:{1}", label.icon="false", color="204,204,255")
class Parameter {
  attr String name;
  attr String value;
}

@gmf.node(label="name", figure ="rectangle", label.icon="false", color="204,204,255")
class Serializer {
  attr String name;

  @gmf.compartment(layout="list",collapsible="false")
  val Parameter[*] parameters;
}