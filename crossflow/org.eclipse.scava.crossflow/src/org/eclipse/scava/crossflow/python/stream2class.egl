[%import "pythonUtil.eol";%]
from crossflow.runtime import JobStream, QueueInfo, Workflow


class [%=s.name%](JobStream):
    """NOTE: Auto-generated by [%=genRule%][%if (genDate.isDefined()) {%] on [%=genDate%][%}%]
    
    Do not edit this class manually
    """

    def __init__(self, workflow: Workflow, enable_prefetch: bool):
        super().__init__("[%=s.name%]", workflow)

        [%for (t in s.inputOf){%]
        # [%=t.name%]
        self._pre["[%=t.name%]"] = QueueInfo(
            f"[%=s.name%]Pre.[%=t.name%].{self.workflow.instance}",
            False
        )
        self._destination['[%=t.name%]'] = QueueInfo(
            f"[%=s.name%]Destination.[%=t.name%].{self.workflow.instance}",
            False
        )
        self._post['[%=t.name%]'] = QueueInfo(
            f"[%=s.name%]Post.[%=t.name%].{self.workflow.instance}",
            False,
            0 if enable_prefetch else 1
        )
        
        [%}%]
    
    def add_consumer(self, consumer, consumer_id: str):
        post_queue = self._post[consumer_id]
        # only connect if the consumer exists (for example it will not in a master_bare situation)
        if consumer is not None:
            def handler(message, ack_func=None):        
                try:
                    obj = self.workflow.serializer.deserialize(message)
                    consumer.consume[%=s.name%]WithNotifications(obj)
                    if ack_func is not None:
                        ack_func()
                except Exception as ex:
                    self.workflow.local_logger.exception("")
                    self.workflow.report_internal_exception(ex)

            self.subscribe(post_queue, handler)
