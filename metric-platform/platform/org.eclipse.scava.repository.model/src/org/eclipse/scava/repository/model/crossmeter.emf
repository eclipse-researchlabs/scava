@namespace(uri="org.eclipse.scava.repository.model", prefix="org.eclipse.scava.repository.model")
package org.eclipse.scava.repository.model;

@db
class ProjectRepository extends NamedElement {
  val Project[*] projects;
  val Role[*] roles;
  val ImportData[*] gitHubImportData;
  val ImportData[*] sfImportData;
  val Person[*] persons;
  val License[*] licenses;
  val MetricProvider[*] metricProviders;
  val SchedulingInformation[*] schedulingInformation;  
  val MetricAnalysis[*] metricAnalysis;
  val ManagerAnalysis[*] managerAnalysis;
  val Company[*] companies;
  val ProjectError[*] errors;
  val Properties[*] properties;
}

@customize
class ProjectError {
	attr Date date;
	attr String dateForError;
	attr String projectId;
	attr String projectName;
	attr String workerIdentifier;
	attr String clazz;
	attr String stackTrace;
}

@customize
class ManagerAnalysis {
	attr String manager;
	attr String method;
	attr String projectId;
	attr Date analysisDate;
	attr Date executionDate;
	attr double millisTaken;
}

class MetricAnalysis {
	attr String metricId;
	attr String projectId;
	attr Date analysisDate;
	attr Date executionDate;
	attr double millisTaken; 
}

class SchedulingInformation {
  @searchable
  attr String workerIdentifier;
  attr long heartbeat;
  attr Boolean isMaster;
  attr String[*] currentLoad; // List of projects its executing
}

class ImportData {
  @searchable
  attr String forge;
  attr String lastImportedProject;
}

abstract class NamedElement {
  @searchable
  attr String name;
}

class Project extends NamedElement {

  @searchable
  attr String shortName;
  attr String description;
  attr int year;
  attr boolean active = true;
  attr String homePage;
  attr boolean analysed = false;
  ref Project parent;
  val VcsRepository[*] vcsRepositories;
  val CommunicationChannel[*] communicationChannels;
  val BugTrackingSystem[*] bugTrackingSystems;
  ref Person[*] persons;
  ref License[*] licenses;
  val MetricProvider[*] metricProviderData;
  val ProjectExecutionInformation executionInformation;
  val Company[*] companies;
}

class MetricProviderExecution {
  ref MetricProvider metricProvider;
  attr String metricProviderId; // Duplicated info, but currently unsure if getting a reference to the metric provider entry is practical
  attr MetricProviderType type; // Duplicated info, but currently unsure if getting a reference to the metric provider entry is practical
  attr String lastExecuted = "-1";
}

class ProjectExecutionInformation { 
  attr String lastExecuted;
  attr boolean monitor = true;
  attr boolean inErrorState = false;
  val LocalStorage storage;
  val MetricProviderExecution[*] metricProviderData;
}


class MetricProvider extends NamedElement {
  @searchable
  attr String metricProviderId;
  @searchable
  attr MetricProviderType type;
  @searchable
  attr MetricProviderCategory category;
}

enum MetricProviderCategory {
	BUGTRACKINGSYSTEM;
	COMMUNICATIONCHANNEL;
	VERSIONCONTROLSYSTEM;
}

enum MetricProviderType {
  HISTORIC = 0;
  TRANSIENT = 1;
}

@customize
class LocalStorage {
  attr String path;
}

abstract class CommunicationChannel {
  attr String url;
  ref Person[*] persons;
  attr boolean nonProcessable;
}

abstract class VcsRepository extends NamedElement {
  attr String created_at;
  attr String updated_at;
  attr String url;
  ref Person[*] persons;
}

@customize
abstract class BugTrackingSystem {
  attr String url;
  ref Person[*] persons;
}

class Person extends NamedElement {
  attr String homePage;
  ref Role[*] roles;
}

class Role extends NamedElement {
}

class License extends NamedElement {
  @searchable
  attr String url;
  attr String content;
}

class Company extends NamedElement {
  @searchable
  attr String url;
}

class Properties extends NamedElement {
  @searchable
  attr String key;
  attr String value;
}

