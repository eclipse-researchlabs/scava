com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#java/lang/IllegalStateException/IllegalStateException(java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/webapp/WebAppContext/setServer(org.eclipse.jetty.server.Server)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/server/AbstractConnector/setMaxIdleTime(int)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/server/handler/ContextHandler/setContextPath(java.lang.String)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/server/bio/SocketConnector/SocketConnector()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/webapp/WebAppContext/WebAppContext()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/util/component/AbstractLifeCycle/start()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#com/github/kristofa/brave/resteasy3/BraveContextAware/getApplicationContext()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/server/AbstractConnector/setPort(int)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/webapp/WebAppContext/setWar(java.lang.String)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/server/Server/Server()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/server/Server/setConnectors(org.eclipse.jetty.server.Connector[])
com/github/kristofa/brave/resteasy3/ITBraveResteasy/setup()#org/eclipse/jetty/server/handler/HandlerWrapper/setHandler(org.eclipse.jetty.server.Handler)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/tearDown()#org/eclipse/jetty/util/component/AbstractLifeCycle/stop()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/tearDown()#org/eclipse/jetty/server/Server/join()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/jboss/resteasy/spi/ResteasyProviderFactory/getInstance()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getParent_id()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/jboss/resteasy/client/jaxrs/ResteasyWebTarget/register(java.lang.Object)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/github/kristofa/brave/resteasy3/BraveRestEasyResource/a()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#java/util/List/size()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/github/kristofa/brave/jaxrs2/BraveClientRequestFilter/BraveClientRequestFilter(com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider,com.github.kristofa.brave.ClientRequestInterceptor)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#javax/ws/rs/core/Response/getStatus()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/jboss/resteasy/plugins/providers/RegisterBuiltin/register(org.jboss.resteasy.spi.ResteasyProviderFactory)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/jboss/resteasy/client/jaxrs/ResteasyClientBuilder/build()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/jboss/resteasy/client/jaxrs/ResteasyClient/target(java.lang.String)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/getCollectedSpans()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/jboss/resteasy/client/jaxrs/ResteasyClientBuilder/ResteasyClientBuilder()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/springframework/beans/factory/BeanFactory/getBean(java.lang.Class)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/twitter/zipkin/gen/Annotation/getHost()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/jboss/resteasy/client/jaxrs/ResteasyWebTarget/proxy(java.lang.Class)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/github/kristofa/brave/jaxrs2/BraveClientResponseFilter/BraveClientResponseFilter(com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider,com.github.kristofa.brave.ClientResponseInterceptor)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#java/util/List/get(int)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/junit/Assert/assertEquals(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/resteasy3/ITBraveResteasy/test()#org/junit/Assert/assertEquals(java.lang.String,long,long)
com/github/kristofa/brave/ClientSpanThreadBinder/getCurrentClientSpan()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientSpanThreadBinder/setCurrentSpan(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/jaxrs2/BraveContainerResponseFilter/filter(javax.ws.rs.container.ContainerRequestContext,javax.ws.rs.container.ContainerResponseContext)#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/jaxrs2/BraveContainerResponseFilter/filter(javax.ws.rs.container.ContainerRequestContext,javax.ws.rs.container.ContainerResponseContext)#com/github/kristofa/brave/jaxrs2/BraveContainerResponseFilter/filter(javax/ws/rs/container/ContainerRequestContext,javax/ws/rs/container/ContainerResponseContext)/$anonymous1/()
com/github/kristofa/brave/jaxrs2/BraveContainerResponseFilter/filter(javax.ws.rs.container.ContainerRequestContext,javax.ws.rs.container.ContainerResponseContext)#com/github/kristofa/brave/http/HttpServerResponseAdapter/HttpServerResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/servlet/ServletHttpServerRequest/getHttpHeaderValue(java.lang.String)#javax/servlet/http/HttpServletRequest/getHeader(java.lang.String)
com/github/kristofa/brave/servlet/ServletHttpServerRequest/getHttpMethod()#javax/servlet/http/HttpServletRequest/getMethod()
com/github/kristofa/brave/servlet/ServletHttpServerRequest/getUri()#java/net/URI/URI(java.lang.String)
com/github/kristofa/brave/servlet/ServletHttpServerRequest/getUri()#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.Throwable)
com/github/kristofa/brave/servlet/ServletHttpServerRequest/getUri()#javax/servlet/http/HttpServletRequest/getRequestURI()
com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)#com/github/kristofa/brave/ClientResponseAdapter/responseAnnotations()
com/github/kristofa/brave/resteasy/BraveConfig/brave()#com/github/kristofa/brave/resteasy/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/resteasy/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/resteasy/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/resteasy/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/Builder(java.lang.String)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/setupBeforeClass()#com/github/kristofa/brave/scribe/ScribeServer/ScribeServer(int)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/setupBeforeClass()#com/github/kristofa/brave/scribe/ScribeServer/start()
com/github/kristofa/brave/scribe/ITScribeSpanCollector/tearDownAfterClass()#com/github/kristofa/brave/scribe/ScribeServer/stop()
com/github/kristofa/brave/scribe/ITScribeSpanCollector/setup()#com/github/kristofa/brave/scribe/ScribeServer/clearReceivedSpans()
com/github/kristofa/brave/scribe/ITScribeSpanCollector/submitSpans(com.github.kristofa.brave.scribe.ScribeSpanCollector,int)#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/submitSpans(com.github.kristofa.brave.scribe.ScribeSpanCollector,int)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/submitSpans(com.github.kristofa.brave.scribe.ScribeSpanCollector,int)#com/github/kristofa/brave/scribe/ITScribeSpanCollector/span(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/span(long)#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/span(long)#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/span(long)#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/span(long)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#com/github/kristofa/brave/scribe/ScribeServer/getReceivedSpans()
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#java/util/List/size()
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/ScribeSpanCollectorParams()
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#java/lang/Thread/sleep(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setBatchSize(int)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#com/github/kristofa/brave/scribe/ITScribeSpanCollector/submitSpans(com.github.kristofa.brave.scribe.ScribeSpanCollector,int)
com/github/kristofa/brave/scribe/ITScribeSpanCollector/testStressTestAndCauseSpanProcessingThreadTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setQueueSize(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/ResultCode/findByValue(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/readFieldEnd()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/readStructEnd()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/readI32()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/scribe/Log_result/validate()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/readFieldBegin()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/readStructBegin()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocolUtil/skip(org.apache.thrift.protocol.TProtocol,byte)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/scribe/Log_result/setSuccessIsSet(boolean)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/writeFieldEnd()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/ResultCode/getValue()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/writeFieldStop()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/writeI32(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/writeFieldBegin(org.apache.thrift.protocol.TField)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/writeStructEnd()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/scribe/Log_result/validate()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TProtocol/writeStructBegin(org.apache.thrift.protocol.TStruct)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceivedNoClientSpan()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceivedNoClientSpan()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/ClientTracerTest/testSetClientReceivedNoClientSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/github/kristofa/brave/ClientSpanState/getClientEndpoint()
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#java/util/List/get(int)
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ClientTracerTest/testSetClientSent()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#java/util/List/get(int)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/github/kristofa/brave/ClientSpanState/getClientEndpoint()
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/github/kristofa/brave/ServerSpanState/getServerEndpoint()
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ClientTracerTest/testSetClientReceived()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/setup()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientTracerTest/setup()#com/github/kristofa/brave/ClientTracer/Builder/traceSampler(com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/ClientTracerTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ClientTracerTest/setup()#com/github/kristofa/brave/ClientTracer/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/ClientTracerTest/setup()#com/github/kristofa/brave/ClientTracer/Builder/randomGenerator(java.util.Random)
com/github/kristofa/brave/ClientTracerTest/setup()#com/github/kristofa/brave/ClientTracer/Builder/build()
com/github/kristofa/brave/ClientTracerTest/setup()#org/powermock/api/mockito/PowerMockito/mockStatic(java.lang.Class,java.lang.Class<?>[])
com/github/kristofa/brave/ClientTracerTest/setup()#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/ClientTracerTest/setup()#com/github/kristofa/brave/ClientTracer/Builder/state(com.github.kristofa.brave.ServerClientAndLocalSpanState)
com/github/kristofa/brave/ClientTracerTest/setup()#org/powermock/api/mockito/PowerMockito/when(T)
com/github/kristofa/brave/ClientTracerTest/setup()#com/github/kristofa/brave/ClientTracer/builder()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleFalse()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleFalse()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleFalse()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleFalse()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#java/util/Random/nextLong()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTrueNotPartOfExistingSpan()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#java/lang/Long/valueOf(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#java/util/Random/nextLong()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/twitter/zipkin/gen/Span/setParent_id(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleTruePartOfExistingSpan()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/github/kristofa/brave/ClientTracer/setClientSent(int,int,java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/github/kristofa/brave/ClientSpanState/getClientEndpoint()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Endpoint/setPort(short)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#java/util/List/get(int)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Endpoint/setIpv4(int)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Endpoint/setService_name(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setValue(byte[])
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_type(com.twitter.zipkin.gen.AnnotationType)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setKey(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress_noServiceName()#com/twitter/zipkin/gen/BinaryAnnotation/getHost()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress_noServiceName()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress_noServiceName()#java/util/List/get(int)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress_noServiceName()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress_noServiceName()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress_noServiceName()#com/github/kristofa/brave/ClientTracer/setClientSent(int,int,java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentServerAddress_noServiceName()#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#java/util/Random/nextLong()
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#com/github/kristofa/brave/ClientSpanState/getClientEndpoint()
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#com/github/kristofa/brave/ServerSpanState/getServerEndpoint()
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#com/github/kristofa/brave/ServerSpan/create(com.twitter.zipkin.gen.Span,java.lang.Boolean)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ClientTracerTest/testSamplerFalse()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#java/util/Random/nextLong()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/ClientTracerTest/testStartNewSpanSampleNullNotPartOfExistingSpan()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ClientTracerTest/testSetClientSentNoClientSpan()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/ClientTracerTest/testSetClientSentNoClientSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientTracerTest/testSetClientSentNoClientSpan()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/net/InetAddress/isSiteLocalAddress()
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/net/InetAddress/getLocalHost()
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/lang/Throwable/initCause(java.lang.Throwable)
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/net/InetAddress/isLoopbackAddress()
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/net/UnknownHostException/UnknownHostException(java.lang.String)
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/net/NetworkInterface/getNetworkInterfaces()
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/net/NetworkInterface/getInetAddresses()
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/util/Enumeration/hasMoreElements()
com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()#java/util/Enumeration/nextElement()
com/github/kristofa/brave/InetAddressUtilities/toInt(java.net.InetAddress)#java/net/InetAddress/getAddress()
com/github/kristofa/brave/InetAddressUtilities/toInt(java.net.InetAddress)#java/nio/ByteBuffer/getInt()
com/github/kristofa/brave/InetAddressUtilities/toInt(java.net.InetAddress)#java/nio/ByteBuffer/wrap(byte[])
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint/hashCode()#com/twitter/zipkin/gen/Span/hashCode()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint/hashCode()#com/twitter/zipkin/gen/Endpoint/hashCode()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint/equals(java.lang.Object)#com/github/kristofa/brave/SpanAndEndpoint/span()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint/equals(java.lang.Object)#com/github/kristofa/brave/SpanAndEndpoint/endpoint()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint/equals(java.lang.Object)#com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint/equals(java.lang.Object)#com/twitter/zipkin/gen/Endpoint/equals(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AutoValue_ServerSpan/hashCode()#com/twitter/zipkin/gen/Span/hashCode()
com/github/kristofa/brave/AutoValue_ServerSpan/hashCode()#java/lang/Boolean/hashCode()
com/github/kristofa/brave/AutoValue_ServerSpan/equals(java.lang.Object)#java/lang/Boolean/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_ServerSpan/equals(java.lang.Object)#com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/AutoValue_ServerSpan/equals(java.lang.Object)#com/github/kristofa/brave/ServerSpan/getSample()
com/github/kristofa/brave/AutoValue_ServerSpan/equals(java.lang.Object)#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/http/HttpClientRequestAdapter/getClientServiceName()#com/github/kristofa/brave/http/ServiceNameProvider/serviceName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/http/HttpClientRequestAdapter/getSpanName()#com/github/kristofa/brave/http/SpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)#com/github/kristofa/brave/http/HttpClientRequest/addHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpClientRequestAdapter/requestAnnotations()#com/github/kristofa/brave/http/HttpRequest/getUri()
com/github/kristofa/brave/http/HttpClientRequestAdapter/requestAnnotations()#java/net/URI/toString()
com/github/kristofa/brave/http/HttpClientRequestAdapter/requestAnnotations()#com/github/kristofa/brave/KeyValueAnnotation/create(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpClientRequestAdapter/requestAnnotations()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/getTimestamp()
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/span()
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/endpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/currentTimeMicroseconds()
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/twitter/zipkin/gen/Span/addToAnnotations(com.twitter.zipkin.gen.Annotation)
com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/spanAndEndpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,int)#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,int)#java/lang/String/valueOf(int)
com/github/kristofa/brave/AnnotationSubmitter/addAnnotation(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Span/addToAnnotations(com.twitter.zipkin.gen.Annotation)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/github/kristofa/brave/SpanAndEndpoint/span()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/github/kristofa/brave/AnnotationSubmitter/spanAndEndpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/github/kristofa/brave/AnnotationSubmitter/addAnnotation(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Annotation)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/github/kristofa/brave/SpanAndEndpoint/endpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String,long)#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/span()
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/addBinaryAnnotation(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/spanAndEndpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/twitter/zipkin/gen/Endpoint/Endpoint(int,short,java.lang.String)
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/setValue(byte[])
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_type(com.twitter.zipkin.gen.AnnotationType)
com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/setKey(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitter/create(com.github.kristofa.brave.SpanAndEndpoint)#com/github/kristofa/brave/AnnotationSubmitter/AnnotationSubmitterImpl/AnnotationSubmitterImpl(com.github.kristofa.brave.SpanAndEndpoint)
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Annotation/getTimestamp()
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/github/kristofa/brave/SpanAndEndpoint/endpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Span/setDuration(long)
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Span/getTimestamp()
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/github/kristofa/brave/SpanAndEndpoint/span()
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/github/kristofa/brave/AnnotationSubmitter/currentTimeMicroseconds()
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/twitter/zipkin/gen/Span/addToAnnotations(com.twitter.zipkin.gen.Annotation)
com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)#com/github/kristofa/brave/AnnotationSubmitter/spanAndEndpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/span()
com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/spanAndEndpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/endpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(java.lang.String,java.lang.String,com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/addBinaryAnnotation(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/span()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/spanAndEndpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/addAnnotation(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Annotation)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/endpoint()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/currentTimeMicroseconds()
com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitter/currentTimeMicroseconds()#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/AnnotationSubmitter/addBinaryAnnotation(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/ArrayList/ArrayList(int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/readFieldEnd()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/readStructEnd()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_args/setMessagesIsSet(boolean)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocolUtil/skip(org.apache.thrift.protocol.TProtocol,byte)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/readListBegin()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/List/add(E)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_args/validate()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/readStructBegin()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/LogEntry/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/readListEnd()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/LogEntry/LogEntry()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/readFieldBegin()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/writeFieldEnd()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/writeListBegin(org.apache.thrift.protocol.TList)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/List/size()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/writeFieldStop()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/LogEntry/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/writeFieldBegin(org.apache.thrift.protocol.TField)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/writeStructEnd()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/writeListEnd()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TList/TList(byte,int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TProtocol/writeStructBegin(org.apache.thrift.protocol.TStruct)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_args/validate()
com/github/kristofa/brave/resteasy/BraveRestEasyResourceImpl/a()#javax/ws/rs/core/Response/ResponseBuilder/build()
com/github/kristofa/brave/resteasy/BraveRestEasyResourceImpl/a()#java/lang/Thread/sleep(long)
com/github/kristofa/brave/resteasy/BraveRestEasyResourceImpl/a()#javax/ws/rs/core/Response/status(int)
com/github/kristofa/brave/ThriftTest/canStoreNanoTimeForDurationCalculation()#java/lang/System/nanoTime()
com/github/kristofa/brave/ThriftTest/canStoreNanoTimeForDurationCalculation()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString_noNullValues()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString_noNullValues()#org/junit/rules/ExpectedException/expect(java.lang.Class)
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString()#java/lang/String/String(byte[],java.nio.charset.Charset)
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString()#com/twitter/zipkin/gen/BinaryAnnotation/getAnnotation_type()
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString()#com/twitter/zipkin/gen/BinaryAnnotation/getValue()
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString()#com/twitter/zipkin/gen/BinaryAnnotation/getKey()
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ThriftTest/testSpanNameLowercase()#com/twitter/zipkin/gen/Span/Span(long,java.lang.String,long,java.util.List,java.util.List)
com/github/kristofa/brave/ThriftTest/testSpanNameLowercase()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/ThriftTest/testSpanNameLowercase()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/ThriftTest/testSpanNameLowercase()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ThriftTest/testSpanNameLowercase()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString_noBlankKeys()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ThriftTest/testBinaryAnnotationCtorForString_noBlankKeys()#org/junit/rules/ExpectedException/expect(java.lang.Class)
com/github/kristofa/brave/ThriftTest/testEndpointServiceNameLowercase()#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/ThriftTest/testEndpointServiceNameLowercase()#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/github/kristofa/brave/ThriftTest/testEndpointServiceNameLowercase()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ThriftTest/testEndpointServiceNameLowercase()#com/twitter/zipkin/gen/Endpoint/Endpoint(int,short,java.lang.String)
com/github/kristofa/brave/ThriftTest/testEndpointServiceNameLowercase()#com/twitter/zipkin/gen/Endpoint/setService_name(java.lang.String)
com/github/kristofa/brave/AutoValue_BraveCallable/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_BraveCallable/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_BraveCallable/equals(java.lang.Object)#com/github/kristofa/brave/BraveCallable/wrappedCallable()
com/github/kristofa/brave/AutoValue_BraveCallable/equals(java.lang.Object)#com/github/kristofa/brave/BraveCallable/serverSpanThreadBinder()
com/github/kristofa/brave/AutoValue_BraveCallable/equals(java.lang.Object)#com/github/kristofa/brave/BraveCallable/currentServerSpan()
com/twitter/zipkin/gen/scribe/Processor/getProcessMap(java.util.Map)#com/twitter/zipkin/gen/scribe/Processor/Log/Log()
com/twitter/zipkin/gen/scribe/Processor/getProcessMap(java.util.Map)#java/util/Map/put(K,V)
com/github/kristofa/brave/jaxrs2/BraveClientRequestFilter/filter(javax.ws.rs.client.ClientRequestContext)#com/github/kristofa/brave/http/HttpClientRequestAdapter/HttpClientRequestAdapter(com.github.kristofa.brave.http.HttpClientRequest,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/jaxrs2/BraveClientRequestFilter/filter(javax.ws.rs.client.ClientRequestContext)#com/github/kristofa/brave/jaxrs2/JaxRs2HttpClientRequest/JaxRs2HttpClientRequest(javax.ws.rs.client.ClientRequestContext)
com/github/kristofa/brave/jaxrs2/BraveClientRequestFilter/filter(javax.ws.rs.client.ClientRequestContext)#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#com/github/kristofa/test/http/MockHttpServer/MockHttpServer(int,com.github.kristofa.test.http.HttpResponseProvider)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#com/github/kristofa/test/http/MockHttpServer/start()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/setup()#com/github/kristofa/test/http/DefaultHttpResponseProvider/DefaultHttpResponseProvider(boolean)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/impl/client/HttpClients/custom()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/test/http/HttpRequestImpl/method(com.github.kristofa.test.http.Method)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/httpclient/BraveHttpResponseInterceptor/BraveHttpResponseInterceptor(com.github.kristofa.brave.ClientResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#java/lang/Long/toString(long,int)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/impl/client/CloseableHttpClient/execute(org.apache.http.client.methods.HttpUriRequest)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpRequestInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/test/http/HttpRequestImpl/path(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/StatusLine/getStatusCode()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/ClientResponseInterceptor/ClientResponseInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/HttpResponse/getStatusLine()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#java/lang/Enum/name()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/test/http/DefaultHttpResponseProvider/set(com.github.kristofa.test.http.HttpRequest,com.github.kristofa.test.http.HttpResponse)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/test/http/HttpResponseImpl/HttpResponseImpl(int,java.lang.String,byte[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/ClientRequestInterceptor/ClientRequestInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/httpclient/BraveHttpRequestInterceptor/BraveHttpRequestInterceptor(com.github.kristofa.brave.ClientRequestInterceptor,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/test/http/HttpRequestImpl/httpMessageHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/test/http/HttpRequestImpl/HttpRequestImpl()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/client/methods/HttpGet/HttpGet(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/test/http/MockHttpServer/verify()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#java/io/Closeable/close()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/impl/client/HttpClientBuilder/build()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrue()#com/github/kristofa/brave/http/StringServiceNameProvider/StringServiceNameProvider(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/tearDown()#com/github/kristofa/test/http/MockHttpServer/stop()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/impl/client/HttpClients/custom()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/httpclient/BraveHttpResponseInterceptor/BraveHttpResponseInterceptor(com.github.kristofa.brave.ClientResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#java/lang/Long/toString(long,int)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/impl/client/CloseableHttpClient/execute(org.apache.http.client.methods.HttpUriRequest)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpRequestInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/HttpRequestImpl/path(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/StatusLine/getStatusCode()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/ClientResponseInterceptor/ClientResponseInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/HttpResponse/getStatusLine()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#java/lang/Enum/name()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/DefaultHttpResponseProvider/set(com.github.kristofa.test.http.HttpRequest,com.github.kristofa.test.http.HttpResponse)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/HttpResponseImpl/HttpResponseImpl(int,java.lang.String,byte[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/HttpRequestImpl/queryParameter(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/HttpRequestImpl/method(com.github.kristofa.test.http.Method)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/ClientRequestInterceptor/ClientRequestInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/httpclient/BraveHttpRequestInterceptor/BraveHttpRequestInterceptor(com.github.kristofa.brave.ClientRequestInterceptor,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/HttpRequestImpl/httpMessageHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/HttpRequestImpl/HttpRequestImpl()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/client/methods/HttpGet/HttpGet(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/test/http/MockHttpServer/verify()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#java/io/Closeable/close()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/impl/client/HttpClientBuilder/build()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testQueryParams()#com/github/kristofa/brave/http/StringServiceNameProvider/StringServiceNameProvider(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/impl/client/HttpClients/custom()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/test/http/HttpRequestImpl/method(com.github.kristofa.test.http.Method)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/httpclient/BraveHttpResponseInterceptor/BraveHttpResponseInterceptor(com.github.kristofa.brave.ClientResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#java/lang/Long/toString(long,int)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/impl/client/CloseableHttpClient/execute(org.apache.http.client.methods.HttpUriRequest)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpRequestInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/test/http/HttpRequestImpl/path(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/StatusLine/getStatusCode()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/ClientResponseInterceptor/ClientResponseInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/HttpResponse/getStatusLine()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#java/lang/Enum/name()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/test/http/DefaultHttpResponseProvider/set(com.github.kristofa.test.http.HttpRequest,com.github.kristofa.test.http.HttpResponse)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/test/http/HttpResponseImpl/HttpResponseImpl(int,java.lang.String,byte[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/ClientRequestInterceptor/ClientRequestInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/httpclient/BraveHttpRequestInterceptor/BraveHttpRequestInterceptor(com.github.kristofa.brave.ClientRequestInterceptor,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/test/http/HttpRequestImpl/httpMessageHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/test/http/HttpRequestImpl/HttpRequestImpl()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/client/methods/HttpGet/HttpGet(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/test/http/MockHttpServer/verify()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#java/io/Closeable/close()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/impl/client/HttpClientBuilder/build()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingTrueHttpNoOk()#com/github/kristofa/brave/http/StringServiceNameProvider/StringServiceNameProvider(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/impl/client/HttpClients/custom()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/test/http/HttpRequestImpl/method(com.github.kristofa.test.http.Method)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/httpclient/BraveHttpResponseInterceptor/BraveHttpResponseInterceptor(com.github.kristofa.brave.ClientResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/impl/client/CloseableHttpClient/execute(org.apache.http.client.methods.HttpUriRequest)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpRequestInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/test/http/HttpRequestImpl/path(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/StatusLine/getStatusCode()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/ClientResponseInterceptor/ClientResponseInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/HttpResponse/getStatusLine()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#java/lang/Enum/name()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/test/http/DefaultHttpResponseProvider/set(com.github.kristofa.test.http.HttpRequest,com.github.kristofa.test.http.HttpResponse)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/test/http/HttpResponseImpl/HttpResponseImpl(int,java.lang.String,byte[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/ClientRequestInterceptor/ClientRequestInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/httpclient/BraveHttpRequestInterceptor/BraveHttpRequestInterceptor(com.github.kristofa.brave.ClientRequestInterceptor,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/test/http/HttpRequestImpl/httpMessageHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/test/http/HttpRequestImpl/HttpRequestImpl()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/client/methods/HttpGet/HttpGet(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/test/http/MockHttpServer/verify()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#java/io/Closeable/close()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/impl/client/HttpClientBuilder/build()
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#org/apache/http/impl/client/HttpClientBuilder/addInterceptorFirst(org.apache.http.HttpResponseInterceptor)
com/github/kristofa/brave/httpclient/ITBraveHttpRequestAndResponseInterceptor/testTracingFalse()#com/github/kristofa/brave/http/StringServiceNameProvider/StringServiceNameProvider(java.lang.String)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#java/io/ByteArrayOutputStream/ByteArrayOutputStream(int)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#org/apache/kafka/clients/producer/ProducerRecord/ProducerRecord(java.lang.String,V)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#org/apache/thrift/protocol/TBinaryProtocol/Factory/Factory()
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#java/util/concurrent/BlockingQueue/poll(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#org/apache/thrift/protocol/TBinaryProtocol/Factory/getProtocol(org.apache.thrift.transport.TTransport)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#java/io/ByteArrayOutputStream/reset()
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#java/io/ByteArrayOutputStream/toByteArray()
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/github/kristofa/brave/kafka/SpanProcessingTask/call()#org/apache/kafka/clients/producer/Producer/send(org.apache.kafka.clients.producer.ProducerRecord)
com/github/kristofa/brave/AutoValue_LocalTracer/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_LocalTracer/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_LocalTracer/equals(java.lang.Object)#com/github/kristofa/brave/LocalTracer/traceSampler()
com/github/kristofa/brave/AutoValue_LocalTracer/equals(java.lang.Object)#com/github/kristofa/brave/LocalTracer/spanAndEndpoint()
com/github/kristofa/brave/AutoValue_LocalTracer/equals(java.lang.Object)#com/github/kristofa/brave/LocalTracer/spanCollector()
com/github/kristofa/brave/AutoValue_LocalTracer/equals(java.lang.Object)#com/github/kristofa/brave/LocalTracer/randomGenerator()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#com/github/kristofa/brave/TraceData/Builder/sample(java.lang.Boolean)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#com/github/kristofa/brave/ServerTracer/setStateNoTracing()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#com/github/kristofa/brave/ServerRequestAdapter/getTraceData()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#com/github/kristofa/brave/TraceData/Builder/build()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleFalse()#com/github/kristofa/brave/TraceData/builder()
com/github/kristofa/brave/ServerRequestInterceptorTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ServerRequestInterceptorTest/setup()#com/github/kristofa/brave/ServerRequestInterceptor/ServerRequestInterceptor(com.github.kristofa.brave.ServerTracer)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/TraceData/Builder/sample(java.lang.Boolean)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/ServerRequestAdapter/requestAnnotations()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/TraceData/Builder/spanId(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/ServerRequestAdapter/getSpanName()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/ServerTracer/setServerReceived()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/TraceData/Builder/build()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/TraceData/builder()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/ServerRequestAdapter/getTraceData()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithoutParentSpanId()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/TraceData/Builder/sample(java.lang.Boolean)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/ServerRequestAdapter/requestAnnotations()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/TraceData/Builder/spanId(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/ServerRequestAdapter/getSpanName()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/TraceData/Builder/build()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/TraceData/builder()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/ServerRequestAdapter/getTraceData()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleSampleRequestWithParentSpanId()#com/github/kristofa/brave/ServerTracer/setServerReceived()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/ServerRequestAdapter/requestAnnotations()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/ServerRequestAdapter/getTraceData()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/ServerRequestAdapter/getSpanName()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/ServerTracer/setServerReceived()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/TraceData/Builder/build()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/TraceData/builder()
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptorTest/handleNoState()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/servlet/BraveServletFilter/StatusExposingServletResponse/sendError(int)#javax/servlet/http/HttpServletResponseWrapper/sendError(int)
com/github/kristofa/brave/servlet/BraveServletFilter/StatusExposingServletResponse/sendError(int,java.lang.String)#javax/servlet/http/HttpServletResponseWrapper/sendError(int,java.lang.String)
com/github/kristofa/brave/servlet/BraveServletFilter/StatusExposingServletResponse/setStatus(int)#javax/servlet/http/HttpServletResponseWrapper/setStatus(int)
com/twitter/zipkin/gen/LogEntry/equals(com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/isSetCategory()
com/twitter/zipkin/gen/LogEntry/equals(com.twitter.zipkin.gen.LogEntry)#java/lang/String/equals(java.lang.Object)
com/twitter/zipkin/gen/LogEntry/equals(com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/isSetMessage()
com/twitter/zipkin/gen/LogEntry/fieldForId(int)#com/twitter/zipkin/gen/LogEntry/_Fields/findByThriftId(int)
com/twitter/zipkin/gen/LogEntry/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/read(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/LogEntry/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/LogEntry/read(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/LogEntry/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/LogEntry/deepCopy()#com/twitter/zipkin/gen/LogEntry/LogEntry(com.twitter.zipkin.gen.LogEntry)
com/twitter/zipkin/gen/LogEntry/isSet(com.twitter.zipkin.gen.LogEntry._Fields)#com/twitter/zipkin/gen/LogEntry/isSetCategory()
com/twitter/zipkin/gen/LogEntry/isSet(com.twitter.zipkin.gen.LogEntry._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/LogEntry/isSet(com.twitter.zipkin.gen.LogEntry._Fields)#com/twitter/zipkin/gen/LogEntry/isSetMessage()
com/twitter/zipkin/gen/LogEntry/isSet(com.twitter.zipkin.gen.LogEntry._Fields)#java/lang/IllegalArgumentException/IllegalArgumentException()
com/twitter/zipkin/gen/LogEntry/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/LogEntry/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/twitter/zipkin/gen/LogEntry/writeObject(java.io.ObjectOutputStream)#com/twitter/zipkin/gen/LogEntry/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/LogEntry/writeObject(java.io.ObjectOutputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/LogEntry/toString()#java/lang/StringBuilder/append(java.lang.String)
com/twitter/zipkin/gen/LogEntry/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
com/twitter/zipkin/gen/LogEntry/toString()#java/lang/StringBuilder/toString()
com/twitter/zipkin/gen/LogEntry/equals(java.lang.Object)#com/twitter/zipkin/gen/LogEntry/equals(com.twitter.zipkin.gen.LogEntry)
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#java/lang/Object/equals(java.lang.Object)
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/isSetCategory()
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#java/lang/String/compareTo(java.lang.String)
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#java/lang/Boolean/compareTo(java.lang.Boolean)
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#java/lang/Class/getName()
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/isSetMessage()
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/TBaseHelper/compareTo(java.lang.String,java.lang.String)
com/twitter/zipkin/gen/LogEntry/compareTo(com.twitter.zipkin.gen.LogEntry)#java/lang/Object/getClass()
com/twitter/zipkin/gen/LogEntry/setFieldValue(com.twitter.zipkin.gen.LogEntry._Fields,java.lang.Object)#com/twitter/zipkin/gen/LogEntry/unsetMessage()
com/twitter/zipkin/gen/LogEntry/setFieldValue(com.twitter.zipkin.gen.LogEntry._Fields,java.lang.Object)#com/twitter/zipkin/gen/LogEntry/setMessage(java.lang.String)
com/twitter/zipkin/gen/LogEntry/setFieldValue(com.twitter.zipkin.gen.LogEntry._Fields,java.lang.Object)#com/twitter/zipkin/gen/LogEntry/setCategory(java.lang.String)
com/twitter/zipkin/gen/LogEntry/setFieldValue(com.twitter.zipkin.gen.LogEntry._Fields,java.lang.Object)#com/twitter/zipkin/gen/LogEntry/unsetCategory()
com/twitter/zipkin/gen/LogEntry/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/LogEntry/write(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/LogEntry/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/write(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/LogEntry/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/LogEntry/getFieldValue(com.twitter.zipkin.gen.LogEntry._Fields)#com/twitter/zipkin/gen/LogEntry/getCategory()
com/twitter/zipkin/gen/LogEntry/getFieldValue(com.twitter.zipkin.gen.LogEntry._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/LogEntry/getFieldValue(com.twitter.zipkin.gen.LogEntry._Fields)#com/twitter/zipkin/gen/LogEntry/getMessage()
com/twitter/zipkin/gen/LogEntry/readObject(java.io.ObjectInputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/LogEntry/readObject(java.io.ObjectInputStream)#com/twitter/zipkin/gen/LogEntry/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/LogEntry/readObject(java.io.ObjectInputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/twitter/zipkin/gen/LogEntry/readObject(java.io.ObjectInputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/AnnotationSubmitThread/call()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/AnnotationSubmitThread/call()#com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/ForwardServlet/doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)#javax/servlet/RequestDispatcher/forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
com/github/kristofa/brave/servlet/ITBraveServletFilter/ForwardServlet/doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)#javax/servlet/ServletRequest/getRequestDispatcher(java.lang.String)
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ClientSpanAndEndpoint/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ClientSpanAndEndpoint/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ClientSpanAndEndpoint/equals(java.lang.Object)#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/resteasy/RestEasyHttpClientRequest/getHttpMethod()#org/jboss/resteasy/client/ClientRequest/getHttpMethod()
com/github/kristofa/brave/resteasy/RestEasyHttpClientRequest/addHeader(java.lang.String,java.lang.String)#org/jboss/resteasy/client/ClientRequest/header(java.lang.String,java.lang.Object)
com/github/kristofa/brave/resteasy/RestEasyHttpClientRequest/getUri()#org/jboss/resteasy/client/ClientRequest/getUri()
com/github/kristofa/brave/resteasy/RestEasyHttpClientRequest/getUri()#java/lang/RuntimeException/RuntimeException(java.lang.Throwable)
com/github/kristofa/brave/resteasy/RestEasyHttpClientRequest/getUri()#java/net/URI/create(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/executeTopLevelOnlyShouldOnlyExecuteTopLevelQueries()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/executeTopLevelOnly()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/executeTopLevelOnlyShouldOnlyExecuteTopLevelQueries()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/executeTopLevelOnlyShouldOnlyExecuteTopLevelQueries()#org/mockito/Mockito/verifyZeroInteractions(java.lang.Object[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/mockito/Matchers/eq(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/mockito/InOrder/verifyNoMoreInteractions()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#com/mysql/jdbc/Connection/getSchema()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingSQLCall()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#com/mysql/jdbc/PreparedStatement/getPreparedSql()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/mockito/Matchers/eq(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/mockito/InOrder/verifyNoMoreInteractions()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#com/mysql/jdbc/Connection/getSchema()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldBeginTracingPreparedStatementCall()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldNotFailIfNoClientTracer()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldNotFailIfNoClientTracer()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientTracer(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldNotFailIfNoClientTracer()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldNotFailIfNoClientTracer()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/postProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.ResultSetInternalMethods,com.mysql.jdbc.Connection,int,boolean,boolean,java.sql.SQLException)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldNotFailIfNoClientTracer()#org/mockito/Mockito/verifyZeroInteractions(java.lang.Object[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#org/mockito/stubbing/OngoingStubbing/thenThrow(java.lang.Throwable[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#java/sql/Connection/getMetaData()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#com/mysql/jdbc/Connection/getHost()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#java/sql/SQLException/SQLException()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#com/mysql/jdbc/Connection/getSchema()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldIgnoreExceptionsLoggingServerAddress()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/setUp()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientTracer(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/setUp()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/MySQLStatementInterceptor()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#java/sql/Connection/getMetaData()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#com/github/kristofa/brave/ClientTracer/setClientSent(int,int,java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#com/mysql/jdbc/Connection/getHost()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#java/sql/DatabaseMetaData/getURL()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#com/mysql/jdbc/Connection/getSchema()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#org/mockito/Matchers/eq(int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#java/sql/SQLException/SQLException(java.lang.String,java.lang.String,int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#org/mockito/InOrder/verifyNoMoreInteractions()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/postProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.ResultSetInternalMethods,com.mysql.jdbc.Connection,int,boolean,boolean,java.sql.SQLException)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingFailedSQLCall()#org/mockito/Matchers/eq(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingSuccessfulSQLCall()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingSuccessfulSQLCall()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingSuccessfulSQLCall()#org/mockito/InOrder/verifyNoMoreInteractions()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingSuccessfulSQLCall()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingSuccessfulSQLCall()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/postProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.ResultSetInternalMethods,com.mysql.jdbc.Connection,int,boolean,boolean,java.sql.SQLException)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingSuccessfulSQLCall()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/postProcessShouldFinishTracingSuccessfulSQLCall()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#java/sql/Connection/getMetaData()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#com/github/kristofa/brave/ClientTracer/setClientSent(int,int,java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#com/mysql/jdbc/Connection/getHost()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#java/sql/DatabaseMetaData/getURL()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#com/mysql/jdbc/Connection/getSchema()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldLogServerAddress_defaultsPortTo3306()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldNotFailIfNoClientTracer()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldNotFailIfNoClientTracer()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientTracer(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldNotFailIfNoClientTracer()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldNotFailIfNoClientTracer()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorTest/preProcessShouldNotFailIfNoClientTracer()#org/mockito/Mockito/verifyZeroInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)#com/github/kristofa/brave/AutoValue_BraveRunnable/AutoValue_BraveRunnable(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder,com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/BraveRunnable/run()#com/github/kristofa/brave/BraveRunnable/serverSpanThreadBinder()
com/github/kristofa/brave/BraveRunnable/run()#java/lang/Runnable/run()
com/github/kristofa/brave/BraveRunnable/run()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/BraveRunnable/run()#com/github/kristofa/brave/BraveRunnable/wrappedRunnable()
com/github/kristofa/brave/BraveRunnable/run()#com/github/kristofa/brave/BraveRunnable/currentServerSpan()
com/github/kristofa/brave/jersey2/SpanCollectorForTesting/addDefaultAnnotation(java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException()
com/github/kristofa/brave/jersey2/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/jersey2/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/toString()
com/github/kristofa/brave/jersey2/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/github/kristofa/brave/jersey2/SpanCollectorForTesting/getInstance()#com/github/kristofa/brave/jersey2/SpanCollectorForTesting/SpanCollectorForTesting()
com/github/kristofa/brave/jaxrs2/JaxRs2HttpClientRequest/getHttpMethod()#javax/ws/rs/client/ClientRequestContext/getMethod()
com/github/kristofa/brave/jaxrs2/JaxRs2HttpClientRequest/addHeader(java.lang.String,java.lang.String)#javax/ws/rs/core/MultivaluedMap/add(K,V)
com/github/kristofa/brave/jaxrs2/JaxRs2HttpClientRequest/addHeader(java.lang.String,java.lang.String)#javax/ws/rs/client/ClientRequestContext/getHeaders()
com/github/kristofa/brave/jaxrs2/JaxRs2HttpClientRequest/getUri()#javax/ws/rs/client/ClientRequestContext/getUri()
com/twitter/zipkin/gen/Annotation/isSetTimestamp()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Annotation/setTimestampIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Annotation/setFieldValue(com.twitter.zipkin.gen.Annotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/twitter/zipkin/gen/Annotation/setFieldValue(com.twitter.zipkin.gen.Annotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/Annotation/unsetHost()
com/twitter/zipkin/gen/Annotation/setFieldValue(com.twitter.zipkin.gen.Annotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/Annotation/unsetValue()
com/twitter/zipkin/gen/Annotation/setFieldValue(com.twitter.zipkin.gen.Annotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/twitter/zipkin/gen/Annotation/setFieldValue(com.twitter.zipkin.gen.Annotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/Annotation/unsetTimestamp()
com/twitter/zipkin/gen/Annotation/setFieldValue(com.twitter.zipkin.gen.Annotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/twitter/zipkin/gen/Annotation/hashCode()#java/util/ArrayList/ArrayList()
com/twitter/zipkin/gen/Annotation/hashCode()#java/util/List/hashCode()
com/twitter/zipkin/gen/Annotation/hashCode()#com/twitter/zipkin/gen/Annotation/isSetHost()
com/twitter/zipkin/gen/Annotation/hashCode()#java/util/List/add(E)
com/twitter/zipkin/gen/Annotation/hashCode()#com/twitter/zipkin/gen/Annotation/isSetValue()
com/twitter/zipkin/gen/Annotation/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/read(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/Annotation/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/Annotation/read(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/Annotation/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/Annotation/deepCopy()#com/twitter/zipkin/gen/Annotation/Annotation(com.twitter.zipkin.gen.Annotation)
com/twitter/zipkin/gen/Annotation/fieldForId(int)#com/twitter/zipkin/gen/Annotation/_Fields/findByThriftId(int)
com/twitter/zipkin/gen/Annotation/isSet(com.twitter.zipkin.gen.Annotation._Fields)#com/twitter/zipkin/gen/Annotation/isSetTimestamp()
com/twitter/zipkin/gen/Annotation/isSet(com.twitter.zipkin.gen.Annotation._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/Annotation/isSet(com.twitter.zipkin.gen.Annotation._Fields)#com/twitter/zipkin/gen/Annotation/isSetHost()
com/twitter/zipkin/gen/Annotation/isSet(com.twitter.zipkin.gen.Annotation._Fields)#java/lang/IllegalArgumentException/IllegalArgumentException()
com/twitter/zipkin/gen/Annotation/isSet(com.twitter.zipkin.gen.Annotation._Fields)#com/twitter/zipkin/gen/Annotation/isSetValue()
com/twitter/zipkin/gen/Annotation/equals(java.lang.Object)#com/twitter/zipkin/gen/Annotation/equals(com.twitter.zipkin.gen.Annotation)
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetTimestamp()
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#java/lang/Object/equals(java.lang.Object)
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#java/lang/String/compareTo(java.lang.String)
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#java/lang/Class/getName()
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetValue()
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#java/lang/Boolean/compareTo(java.lang.Boolean)
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetHost()
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#org/apache/thrift/TBaseHelper/compareTo(java.lang.String,java.lang.String)
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#org/apache/thrift/TBaseHelper/compareTo(long,long)
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#java/lang/Object/getClass()
com/twitter/zipkin/gen/Annotation/compareTo(com.twitter.zipkin.gen.Annotation)#org/apache/thrift/TBaseHelper/compareTo(java.lang.Comparable,java.lang.Comparable)
com/twitter/zipkin/gen/Annotation/toString()#java/lang/StringBuilder/append(java.lang.String)
com/twitter/zipkin/gen/Annotation/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
com/twitter/zipkin/gen/Annotation/toString()#java/lang/StringBuilder/append(java.lang.Object)
com/twitter/zipkin/gen/Annotation/toString()#java/lang/StringBuilder/toString()
com/twitter/zipkin/gen/Annotation/toString()#java/lang/StringBuilder/append(long)
com/twitter/zipkin/gen/Annotation/toString()#com/twitter/zipkin/gen/Annotation/isSetHost()
com/twitter/zipkin/gen/Annotation/unsetTimestamp()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Annotation/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/Annotation/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/twitter/zipkin/gen/Annotation/writeObject(java.io.ObjectOutputStream)#com/twitter/zipkin/gen/Annotation/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Annotation/writeObject(java.io.ObjectOutputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/Annotation/getFieldValue(com.twitter.zipkin.gen.Annotation._Fields)#com/twitter/zipkin/gen/Annotation/getValue()
com/twitter/zipkin/gen/Annotation/getFieldValue(com.twitter.zipkin.gen.Annotation._Fields)#com/twitter/zipkin/gen/Annotation/getTimestamp()
com/twitter/zipkin/gen/Annotation/getFieldValue(com.twitter.zipkin.gen.Annotation._Fields)#java/lang/Long/valueOf(long)
com/twitter/zipkin/gen/Annotation/getFieldValue(com.twitter.zipkin.gen.Annotation._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/Annotation/getFieldValue(com.twitter.zipkin.gen.Annotation._Fields)#com/twitter/zipkin/gen/Annotation/getHost()
com/twitter/zipkin/gen/Annotation/validate()#com/twitter/zipkin/gen/Endpoint/validate()
com/twitter/zipkin/gen/Annotation/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/Annotation/write(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/Annotation/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/write(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/Annotation/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/Annotation/readObject(java.io.ObjectInputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/Annotation/readObject(java.io.ObjectInputStream)#com/twitter/zipkin/gen/Annotation/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Annotation/readObject(java.io.ObjectInputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/twitter/zipkin/gen/Annotation/readObject(java.io.ObjectInputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/Annotation/setTimestamp(long)#com/twitter/zipkin/gen/Annotation/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Annotation/clear()#com/twitter/zipkin/gen/Annotation/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Annotation/equals(com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetHost()
com/twitter/zipkin/gen/Annotation/equals(com.twitter.zipkin.gen.Annotation)#java/lang/String/equals(java.lang.Object)
com/twitter/zipkin/gen/Annotation/equals(com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Endpoint/equals(com.twitter.zipkin.gen.Endpoint)
com/twitter/zipkin/gen/Annotation/equals(com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetValue()
com/github/kristofa/brave/http/HttpSpanCollector/Config/builder()#com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/Builder/Builder()
com/github/kristofa/brave/http/HttpSpanCollector/Config/builder()#com/github/kristofa/brave/http/HttpSpanCollector/Config/Builder/readTimeout(int)
com/github/kristofa/brave/http/HttpSpanCollector/Config/builder()#com/github/kristofa/brave/http/HttpSpanCollector/Config/Builder/flushInterval(int)
com/github/kristofa/brave/http/HttpSpanCollector/Config/builder()#com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/Builder/connectTimeout(int)
com/github/kristofa/brave/spring/SpringHttpClientRequest/getHttpMethod()#java/lang/Enum/name()
com/github/kristofa/brave/spring/SpringHttpClientRequest/getHttpMethod()#org/springframework/http/HttpRequest/getMethod()
com/github/kristofa/brave/spring/SpringHttpClientRequest/getUri()#org/springframework/http/HttpRequest/getURI()
com/github/kristofa/brave/spring/SpringHttpClientRequest/addHeader(java.lang.String,java.lang.String)#org/springframework/http/HttpHeaders/add(java.lang.String,java.lang.String)
com/github/kristofa/brave/spring/SpringHttpClientRequest/addHeader(java.lang.String,java.lang.String)#org/springframework/http/HttpMessage/getHeaders()
com/github/kristofa/brave/ServerSpan/create(com.twitter.zipkin.gen.Span,java.lang.Boolean)#com/github/kristofa/brave/AutoValue_ServerSpan/AutoValue_ServerSpan(com.twitter.zipkin.gen.Span,java.lang.Boolean)
com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)#com/twitter/zipkin/gen/Span/setParent_id(long)
com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)#com/github/kristofa/brave/ServerSpan/create(com.twitter.zipkin.gen.Span,java.lang.Boolean)
com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)#com/github/kristofa/brave/ServerSpan/create(com.twitter.zipkin.gen.Span,java.lang.Boolean)
com/github/kristofa/brave/AutoValue_ServerTracer/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_ServerTracer/equals(java.lang.Object)#com/github/kristofa/brave/ServerTracer/traceSampler()
com/github/kristofa/brave/AutoValue_ServerTracer/equals(java.lang.Object)#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/AutoValue_ServerTracer/equals(java.lang.Object)#com/github/kristofa/brave/ServerTracer/spanCollector()
com/github/kristofa/brave/AutoValue_ServerTracer/equals(java.lang.Object)#com/github/kristofa/brave/ServerTracer/randomGenerator()
com/github/kristofa/brave/AutoValue_ServerTracer/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/setup()#com/github/kristofa/brave/http/HttpServerResponseAdapter/HttpServerResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#com/github/kristofa/brave/http/HttpResponse/getHttpStatusCode()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#com/github/kristofa/brave/http/HttpServerResponseAdapter/responseAnnotations()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#java/util/Collection/isEmpty()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/successResponse()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/http/HttpResponse/getHttpStatusCode()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/http/HttpServerResponseAdapter/responseAnnotations()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#java/util/Collection/size()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#java/util/Iterator/next()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#java/util/Collection/iterator()
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/http/HttpServerResponseAdapterTest/nonSuccessResponse()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/twitter/zipkin/gen/Span/isSetParent_id()
com/github/kristofa/brave/ITBrave/SpanThread/call()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/LocalTracer/finishSpan()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/Brave/localTracer()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/twitter/zipkin/gen/Span/isSetAnnotations()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ServerTracer/setServerSend()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)
com/github/kristofa/brave/ITBrave/SpanThread/call()#java/util/List/size()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/ITBrave/SpanThread/call()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ITBrave/IntegrationTestSpanCollector/getCollectedSpans()
com/github/kristofa/brave/ITBrave/SpanThread/call()#java/util/Random/Random()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/Brave/serverTracer()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/ITBrave/SpanThread/call()#java/util/Random/nextLong()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/ITBrave/SpanThread/call()#java/util/List/get(int)
com/github/kristofa/brave/ITBrave/SpanThread/call()#org/junit/Assert/assertEquals(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ITBrave/SpanThread/call()#org/junit/Assert/assertEquals(java.lang.String,long,long)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ServerTracer/setServerReceived()
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/Brave/clientTracer()
com/github/kristofa/brave/ITBrave/SpanThread/call()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ITBrave/SpanThread/call()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/Brave/Builder/Builder(java.lang.String)
com/github/kristofa/brave/ITBrave/SpanThread/call()#com/github/kristofa/brave/ITBrave/IntegrationTestSpanCollector/IntegrationTestSpanCollector()
com/github/kristofa/brave/ITBrave/SpanThread/call()#java/util/stream/Stream/of(T[])
com/github/kristofa/brave/AutoValue_TraceData/Builder/build()#com/github/kristofa/brave/AutoValue_TraceData/AutoValue_TraceData(com.github.kristofa.brave.SpanId,java.lang.Boolean)
com/github/kristofa/brave/BraveApiConfigTest/testServerResponseInterceptor()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testServerResponseInterceptor()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testServerResponseInterceptor()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testServerTracer()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testServerTracer()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testServerTracer()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testClientResponseInterceptor()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testClientResponseInterceptor()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testClientResponseInterceptor()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testAnnotationSubmitter()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testAnnotationSubmitter()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.String,java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testAnnotationSubmitter()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/after()#org/springframework/context/support/AbstractApplicationContext/close()
com/github/kristofa/brave/BraveApiConfigTest/testClientTracer()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testClientTracer()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testClientTracer()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/setup()#org/springframework/context/annotation/AnnotationConfigApplicationContext/AnnotationConfigApplicationContext(java.lang.Class<?>[])
com/github/kristofa/brave/BraveApiConfigTest/testServerRequestInterceptor()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testServerRequestInterceptor()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testServerRequestInterceptor()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testClientRequestInterceptor()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testClientRequestInterceptor()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testClientRequestInterceptor()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testServerSpanThreadBinder()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveApiConfigTest/testServerSpanThreadBinder()#org/springframework/context/support/AbstractApplicationContext/getBean(java.lang.Class)
com/github/kristofa/brave/BraveApiConfigTest/testServerSpanThreadBinder()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/scribe/ScribeReceiver/setDelayMs(int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
com/github/kristofa/brave/scribe/ScribeReceiver/getSpans()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/scribe/ScribeReceiver/getSpans()#java/util/concurrent/BlockingQueue/drainTo(java.util.Collection)
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#java/lang/Thread/sleep(long)
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#java/util/Base64/getDecoder()
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#com/twitter/zipkin/gen/Span/read(org.apache.thrift.protocol.TProtocol)
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#java/io/ByteArrayInputStream/ByteArrayInputStream(byte[])
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#org/apache/thrift/protocol/TBinaryProtocol/Factory/Factory()
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#java/util/Base64/Decoder/decode(java.lang.String)
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#java/util/concurrent/BlockingQueue/add(E)
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#com/twitter/zipkin/gen/LogEntry/getMessage()
com/github/kristofa/brave/scribe/ScribeReceiver/Log(java.util.List)#org/apache/thrift/protocol/TProtocolFactory/getProtocol(org.apache.thrift.transport.TTransport)
com/github/kristofa/brave/scribe/ScribeReceiver/clearReceivedSpans()#java/util/Collection/clear()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBean/close()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientTracer(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/setupBeforeClass()#com/github/kristofa/brave/scribe/ScribeServer/ScribeServer(int)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/setupBeforeClass()#com/github/kristofa/brave/scribe/ScribeServer/start()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/tearDownAfterClass()#com/github/kristofa/brave/scribe/ScribeServer/stop()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/setup()#com/github/kristofa/brave/scribe/ScribeServer/clearReceivedSpans()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/github/kristofa/brave/scribe/ScribeServer/getReceivedSpans()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#java/util/List/size()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setQueueSize(int)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollector/close()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/ScribeSpanCollectorParams()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#java/lang/Thread/sleep(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setBatchSize(int)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorOfferTimeout/testOfferTimeOut()#java/util/logging/Logger/info(java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/deepCopy()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(com.twitter.zipkin.gen.BinaryAnnotation)
com/twitter/zipkin/gen/BinaryAnnotation/setValue(java.nio.ByteBuffer)#org/apache/thrift/TBaseHelper/copyBinary(java.nio.ByteBuffer)
com/twitter/zipkin/gen/BinaryAnnotation/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/read(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/BinaryAnnotation/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/BinaryAnnotation/read(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/BinaryAnnotation/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/BinaryAnnotation/fieldForId(int)#com/twitter/zipkin/gen/BinaryAnnotation/_Fields/findByThriftId(int)
com/twitter/zipkin/gen/BinaryAnnotation/setValue(byte[])#java/util/Arrays/copyOf(byte[],int)
com/twitter/zipkin/gen/BinaryAnnotation/setValue(byte[])#java/nio/ByteBuffer/wrap(byte[])
com/twitter/zipkin/gen/BinaryAnnotation/bufferForValue()#org/apache/thrift/TBaseHelper/copyBinary(java.nio.ByteBuffer)
com/twitter/zipkin/gen/BinaryAnnotation/isSet(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/BinaryAnnotation/isSet(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/isSetKey()
com/twitter/zipkin/gen/BinaryAnnotation/isSet(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/isSetHost()
com/twitter/zipkin/gen/BinaryAnnotation/isSet(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/isSetAnnotation_type()
com/twitter/zipkin/gen/BinaryAnnotation/isSet(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/isSetValue()
com/twitter/zipkin/gen/BinaryAnnotation/isSet(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#java/lang/IllegalArgumentException/IllegalArgumentException()
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/Object/equals(java.lang.Object)
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/Boolean/compareTo(java.lang.Boolean)
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetAnnotation_type()
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetValue()
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetKey()
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/String/compareTo(java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetHost()
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/Class/getName()
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/TBaseHelper/compareTo(java.lang.String,java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/Object/getClass()
com/twitter/zipkin/gen/BinaryAnnotation/compareTo(com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/TBaseHelper/compareTo(java.lang.Comparable,java.lang.Comparable)
com/twitter/zipkin/gen/BinaryAnnotation/equals(java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)
com/twitter/zipkin/gen/BinaryAnnotation/toString()#java/lang/StringBuilder/append(java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/toString()#org/apache/thrift/TBaseHelper/toString(java.nio.ByteBuffer,java.lang.StringBuilder)
com/twitter/zipkin/gen/BinaryAnnotation/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/toString()#com/twitter/zipkin/gen/BinaryAnnotation/isSetHost()
com/twitter/zipkin/gen/BinaryAnnotation/toString()#java/lang/StringBuilder/append(java.lang.Object)
com/twitter/zipkin/gen/BinaryAnnotation/toString()#java/lang/StringBuilder/toString()
com/twitter/zipkin/gen/BinaryAnnotation/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/BinaryAnnotation/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/twitter/zipkin/gen/BinaryAnnotation/writeObject(java.io.ObjectOutputStream)#com/twitter/zipkin/gen/BinaryAnnotation/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/BinaryAnnotation/writeObject(java.io.ObjectOutputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/BinaryAnnotation/getFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/BinaryAnnotation/getFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/getKey()
com/twitter/zipkin/gen/BinaryAnnotation/getFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/getHost()
com/twitter/zipkin/gen/BinaryAnnotation/getFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/getAnnotation_type()
com/twitter/zipkin/gen/BinaryAnnotation/getFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields)#com/twitter/zipkin/gen/BinaryAnnotation/getValue()
com/twitter/zipkin/gen/BinaryAnnotation/validate()#com/twitter/zipkin/gen/Endpoint/validate()
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/unsetHost()
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/unsetValue()
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/unsetKey()
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/unsetAnnotation_type()
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/setValue(java.nio.ByteBuffer)
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_type(com.twitter.zipkin.gen.AnnotationType)
com/twitter/zipkin/gen/BinaryAnnotation/setFieldValue(com.twitter.zipkin.gen.BinaryAnnotation._Fields,java.lang.Object)#com/twitter/zipkin/gen/BinaryAnnotation/setKey(java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/BinaryAnnotation/write(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/BinaryAnnotation/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/write(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/BinaryAnnotation/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/Enum/equals(java.lang.Object)
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#java/nio/ByteBuffer/equals(java.lang.Object)
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetKey()
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetAnnotation_type()
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetValue()
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Endpoint/equals(com.twitter.zipkin.gen.Endpoint)
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetHost()
com/twitter/zipkin/gen/BinaryAnnotation/equals(com.twitter.zipkin.gen.BinaryAnnotation)#java/lang/String/equals(java.lang.Object)
com/twitter/zipkin/gen/BinaryAnnotation/readObject(java.io.ObjectInputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/BinaryAnnotation/readObject(java.io.ObjectInputStream)#com/twitter/zipkin/gen/BinaryAnnotation/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/BinaryAnnotation/readObject(java.io.ObjectInputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/twitter/zipkin/gen/BinaryAnnotation/readObject(java.io.ObjectInputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/BinaryAnnotation/getValue()#com/twitter/zipkin/gen/BinaryAnnotation/setValue(java.nio.ByteBuffer)
com/twitter/zipkin/gen/BinaryAnnotation/getValue()#java/nio/ByteBuffer/array()
com/twitter/zipkin/gen/BinaryAnnotation/getValue()#org/apache/thrift/TBaseHelper/rightSize(java.nio.ByteBuffer)
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#java/util/ArrayList/ArrayList()
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#com/twitter/zipkin/gen/AnnotationType/getValue()
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#java/util/List/hashCode()
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#com/twitter/zipkin/gen/BinaryAnnotation/isSetKey()
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#com/twitter/zipkin/gen/BinaryAnnotation/isSetHost()
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#com/twitter/zipkin/gen/BinaryAnnotation/isSetAnnotation_type()
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#java/util/List/add(E)
com/twitter/zipkin/gen/BinaryAnnotation/hashCode()#com/twitter/zipkin/gen/BinaryAnnotation/isSetValue()
com/twitter/zipkin/gen/scribe/Log_args/isSet(com.twitter.zipkin.gen.scribe.Log_args._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/scribe/Log_args/isSet(com.twitter.zipkin.gen.scribe.Log_args._Fields)#com/twitter/zipkin/gen/scribe/Log_args/isSetMessages()
com/twitter/zipkin/gen/scribe/Log_args/isSet(com.twitter.zipkin.gen.scribe.Log_args._Fields)#java/lang/IllegalArgumentException/IllegalArgumentException()
com/twitter/zipkin/gen/scribe/Log_args/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/scribe/Log_args/write(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_args/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/write(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/scribe/Log_args/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/scribe/Log_args/readObject(java.io.ObjectInputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/scribe/Log_args/readObject(java.io.ObjectInputStream)#com/twitter/zipkin/gen/scribe/Log_args/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_args/readObject(java.io.ObjectInputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/twitter/zipkin/gen/scribe/Log_args/readObject(java.io.ObjectInputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/scribe/Log_args/getMessagesIterator()#java/util/List/iterator()
com/twitter/zipkin/gen/scribe/Log_args/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/read(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/scribe/Log_args/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/scribe/Log_args/read(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_args/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/scribe/Log_args/deepCopy()#com/twitter/zipkin/gen/scribe/Log_args/Log_args(com.twitter.zipkin.gen.scribe.Log_args)
com/twitter/zipkin/gen/scribe/Log_args/addToMessages(com.twitter.zipkin.gen.LogEntry)#java/util/ArrayList/ArrayList()
com/twitter/zipkin/gen/scribe/Log_args/addToMessages(com.twitter.zipkin.gen.LogEntry)#java/util/List/add(E)
com/twitter/zipkin/gen/scribe/Log_args/fieldForId(int)#com/twitter/zipkin/gen/scribe/Log_args/_Fields/findByThriftId(int)
com/twitter/zipkin/gen/scribe/Log_args/setFieldValue(com.twitter.zipkin.gen.scribe.Log_args._Fields,java.lang.Object)#com/twitter/zipkin/gen/scribe/Log_args/setMessages(java.util.List)
com/twitter/zipkin/gen/scribe/Log_args/setFieldValue(com.twitter.zipkin.gen.scribe.Log_args._Fields,java.lang.Object)#com/twitter/zipkin/gen/scribe/Log_args/unsetMessages()
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#java/lang/Object/equals(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#java/lang/String/compareTo(java.lang.String)
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#java/lang/Boolean/compareTo(java.lang.Boolean)
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#java/lang/Class/getName()
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_args/isSetMessages()
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#java/lang/Object/getClass()
com/twitter/zipkin/gen/scribe/Log_args/compareTo(com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/TBaseHelper/compareTo(java.util.List,java.util.List)
com/twitter/zipkin/gen/scribe/Log_args/toString()#java/lang/StringBuilder/append(java.lang.String)
com/twitter/zipkin/gen/scribe/Log_args/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
com/twitter/zipkin/gen/scribe/Log_args/toString()#java/lang/StringBuilder/append(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_args/toString()#java/lang/StringBuilder/toString()
com/twitter/zipkin/gen/scribe/Log_args/equals(java.lang.Object)#com/twitter/zipkin/gen/scribe/Log_args/equals(com.twitter.zipkin.gen.scribe.Log_args)
com/twitter/zipkin/gen/scribe/Log_args/getFieldValue(com.twitter.zipkin.gen.scribe.Log_args._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/scribe/Log_args/getFieldValue(com.twitter.zipkin.gen.scribe.Log_args._Fields)#com/twitter/zipkin/gen/scribe/Log_args/getMessages()
com/twitter/zipkin/gen/scribe/Log_args/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/scribe/Log_args/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/twitter/zipkin/gen/scribe/Log_args/writeObject(java.io.ObjectOutputStream)#com/twitter/zipkin/gen/scribe/Log_args/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_args/writeObject(java.io.ObjectOutputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/scribe/Log_args/getMessagesSize()#java/util/List/size()
com/twitter/zipkin/gen/scribe/Log_args/equals(com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_args/isSetMessages()
com/twitter/zipkin/gen/scribe/Log_args/equals(com.twitter.zipkin.gen.scribe.Log_args)#java/util/List/equals(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_result/isSet(com.twitter.zipkin.gen.scribe.Log_result._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/scribe/Log_result/isSet(com.twitter.zipkin.gen.scribe.Log_result._Fields)#com/twitter/zipkin/gen/scribe/Log_result/isSetSuccess()
com/twitter/zipkin/gen/scribe/Log_result/isSet(com.twitter.zipkin.gen.scribe.Log_result._Fields)#java/lang/IllegalArgumentException/IllegalArgumentException()
com/twitter/zipkin/gen/scribe/Log_result/readObject(java.io.ObjectInputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/scribe/Log_result/readObject(java.io.ObjectInputStream)#com/twitter/zipkin/gen/scribe/Log_result/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_result/readObject(java.io.ObjectInputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/twitter/zipkin/gen/scribe/Log_result/readObject(java.io.ObjectInputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/scribe/Log_result/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/read(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/scribe/Log_result/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/scribe/Log_result/read(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_result/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/scribe/Log_result/deepCopy()#com/twitter/zipkin/gen/scribe/Log_result/Log_result(com.twitter.zipkin.gen.scribe.Log_result)
com/twitter/zipkin/gen/scribe/Log_result/fieldForId(int)#com/twitter/zipkin/gen/scribe/Log_result/_Fields/findByThriftId(int)
com/twitter/zipkin/gen/scribe/Log_result/setFieldValue(com.twitter.zipkin.gen.scribe.Log_result._Fields,java.lang.Object)#com/twitter/zipkin/gen/scribe/Log_result/setSuccess(com.twitter.zipkin.gen.ResultCode)
com/twitter/zipkin/gen/scribe/Log_result/setFieldValue(com.twitter.zipkin.gen.scribe.Log_result._Fields,java.lang.Object)#com/twitter/zipkin/gen/scribe/Log_result/unsetSuccess()
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#java/lang/Object/equals(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#java/lang/String/compareTo(java.lang.String)
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/scribe/Log_result/isSetSuccess()
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#java/lang/Boolean/compareTo(java.lang.Boolean)
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#java/lang/Class/getName()
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#java/lang/Object/getClass()
com/twitter/zipkin/gen/scribe/Log_result/compareTo(com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/TBaseHelper/compareTo(java.lang.Comparable,java.lang.Comparable)
com/twitter/zipkin/gen/scribe/Log_result/toString()#java/lang/StringBuilder/append(java.lang.String)
com/twitter/zipkin/gen/scribe/Log_result/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
com/twitter/zipkin/gen/scribe/Log_result/toString()#java/lang/StringBuilder/append(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_result/toString()#java/lang/StringBuilder/toString()
com/twitter/zipkin/gen/scribe/Log_result/getFieldValue(com.twitter.zipkin.gen.scribe.Log_result._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/scribe/Log_result/getFieldValue(com.twitter.zipkin.gen.scribe.Log_result._Fields)#com/twitter/zipkin/gen/scribe/Log_result/getSuccess()
com/twitter/zipkin/gen/scribe/Log_result/equals(java.lang.Object)#com/twitter/zipkin/gen/scribe/Log_result/equals(com.twitter.zipkin.gen.scribe.Log_result)
com/twitter/zipkin/gen/scribe/Log_result/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/scribe/Log_result/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/twitter/zipkin/gen/scribe/Log_result/writeObject(java.io.ObjectOutputStream)#com/twitter/zipkin/gen/scribe/Log_result/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_result/writeObject(java.io.ObjectOutputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/scribe/Log_result/equals(com.twitter.zipkin.gen.scribe.Log_result)#java/lang/Enum/equals(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_result/equals(com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/scribe/Log_result/isSetSuccess()
com/twitter/zipkin/gen/scribe/Log_result/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/scribe/Log_result/write(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/scribe/Log_result/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/write(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/scribe/Log_result/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/springframework/mock/web/MockHttpServletResponse/MockHttpServletResponse()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/springframework/mock/web/MockHttpServletRequest/getAttribute(java.lang.String)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterConcurrentHandlingStarted(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/springframework/mock/web/MockHttpServletRequest/MockHttpServletRequest()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterConcurrentHandlingStartedShouldSaveStateAndClear()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/mockito/Matchers/same(T)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/springframework/mock/web/MockHttpServletResponse/MockHttpServletResponse()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/mockito/Matchers/any(java.lang.Class)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/springframework/mock/web/MockHttpServletRequest/setAttribute(java.lang.String,java.lang.Object)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/springframework/mock/web/MockHttpServletRequest/MockHttpServletRequest()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldResetServerTraceOnAsyncCalls()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/setUp()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/setUp()#com/github/kristofa/brave/spring/ServletHandlerInterceptor/ServletHandlerInterceptor(com.github.kristofa.brave.ServerRequestInterceptor,com.github.kristofa.brave.ServerResponseInterceptor,com.github.kristofa.brave.http.SpanNameProvider,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldNotifyOfCompletion()#org/springframework/mock/web/MockHttpServletResponse/MockHttpServletResponse()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldNotifyOfCompletion()#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldNotifyOfCompletion()#com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldNotifyOfCompletion()#org/springframework/mock/web/MockHttpServletRequest/MockHttpServletRequest()
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldNotifyOfCompletion()#org/mockito/Matchers/any(java.lang.Class)
com/github/kristofa/brave/spring/ServletHandlerInterceptorTest/afterCompletionShouldNotifyOfCompletion()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/servlet/SpanCollectorForTesting/clear()#java/util/List/clear()
com/github/kristofa/brave/servlet/SpanCollectorForTesting/getInstance()#com/github/kristofa/brave/servlet/SpanCollectorForTesting/SpanCollectorForTesting()
com/github/kristofa/brave/servlet/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/servlet/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/toString()
com/github/kristofa/brave/servlet/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/github/kristofa/brave/ServerTracer/setServerSend()#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/ServerTracer/setServerSend()#com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/ServerTracer/setServerSend()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracer/setServerSend()#com/github/kristofa/brave/ServerTracer/spanCollector()
com/github/kristofa/brave/ServerTracer/setServerSend()#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/ServerTracer/setStateNoTracing()#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/ServerTracer/setStateNoTracing()#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/ServerTracer/setStateNoTracing()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)#com/github/kristofa/brave/internal/Util/checkNotBlank(java.lang.String,java.lang.String,java.lang.Object[])
com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/ServerTracer/traceSampler()
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/internal/Util/checkNotBlank(java.lang.String,java.lang.String,java.lang.Object[])
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/ServerTracer/randomGenerator()
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#java/util/Random/nextLong()
com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/ServerTracer/builder()#com/github/kristofa/brave/AutoValue_ServerTracer/Builder/Builder()
com/github/kristofa/brave/ServerTracer/clearCurrentSpan()#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/ServerTracer/clearCurrentSpan()#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/ServerTracer/clearCurrentSpan()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracer/setServerReceived()#com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)
com/github/kristofa/brave/ServerTracer/setServerReceived(int,int,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)
com/github/kristofa/brave/ServerTracer/setServerReceived(int,int,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardSchemeFactory/getScheme()#com/twitter/zipkin/gen/scribe/Log_result/Log_resultStandardScheme/Log_resultStandardScheme()
com/github/kristofa/brave/AutoValue_BraveRunnable/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_BraveRunnable/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_BraveRunnable/equals(java.lang.Object)#com/github/kristofa/brave/BraveRunnable/serverSpanThreadBinder()
com/github/kristofa/brave/AutoValue_BraveRunnable/equals(java.lang.Object)#com/github/kristofa/brave/BraveRunnable/wrappedRunnable()
com/github/kristofa/brave/AutoValue_BraveRunnable/equals(java.lang.Object)#com/github/kristofa/brave/BraveRunnable/currentServerSpan()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardSchemeFactory/getScheme()#com/twitter/zipkin/gen/scribe/Log_args/Log_argsStandardScheme/Log_argsStandardScheme()
com/github/kristofa/brave/resteasy/SpanCollectorForTesting/getInstance()#com/github/kristofa/brave/resteasy/SpanCollectorForTesting/SpanCollectorForTesting()
com/github/kristofa/brave/resteasy/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/resteasy/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/toString()
com/github/kristofa/brave/resteasy/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/github/kristofa/brave/resteasy/SpanCollectorForTesting/addDefaultAnnotation(java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException()
com/github/kristofa/brave/resteasy3/ServiceNameProviderConfig/serviceNameProvider()#com/github/kristofa/brave/http/StringServiceNameProvider/StringServiceNameProvider(java.lang.String)
com/github/kristofa/brave/TraceDataTest/testDefaultTraceData()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/TraceDataTest/testDefaultTraceData()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/TraceDataTest/testDefaultTraceData()#com/github/kristofa/brave/TraceData/Builder/build()
com/github/kristofa/brave/TraceDataTest/testDefaultTraceData()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/TraceDataTest/testDefaultTraceData()#com/github/kristofa/brave/TraceData/builder()
com/github/kristofa/brave/TraceDataTest/testTraceDataConstruction()#com/github/kristofa/brave/TraceData/Builder/sample(java.lang.Boolean)
com/github/kristofa/brave/TraceDataTest/testTraceDataConstruction()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/TraceDataTest/testTraceDataConstruction()#com/github/kristofa/brave/TraceData/Builder/spanId(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/TraceDataTest/testTraceDataConstruction()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/TraceDataTest/testTraceDataConstruction()#com/github/kristofa/brave/TraceData/Builder/build()
com/github/kristofa/brave/TraceDataTest/testTraceDataConstruction()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/TraceDataTest/testTraceDataConstruction()#com/github/kristofa/brave/TraceData/builder()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDeliveredSuccessfully()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/ScribeSpanCollectorParams()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDeliveredSuccessfully()#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDeliveredSuccessfully()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDeliveredSuccessfully()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setMetricsHandler(com.github.kristofa.brave.SpanCollectorMetricsHandler)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDeliveredSuccessfully()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeServer/getReceivedSpans()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/ScribeSpanCollectorParams()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeServer/introduceDelay(int,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setMetricsHandler(com.github.kristofa.brave.SpanCollectorMetricsHandler)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#java/util/List/size()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setQueueSize(int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setBatchSize(int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToFullQueue()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/beforeClass()#com/github/kristofa/brave/scribe/ScribeServer/ScribeServer(int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/beforeClass()#com/github/kristofa/brave/scribe/ScribeServer/start()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/setup()#com/github/kristofa/brave/scribe/ScribeServer/clearDelay()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/setup()#com/github/kristofa/brave/scribe/ScribeServer/clearReceivedSpans()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/setup()#com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/EventsHandler/EventsHandler()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToConnectionFailure()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/ScribeSpanCollectorParams()
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToConnectionFailure()#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToConnectionFailure()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToConnectionFailure()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setFailOnSetup(boolean)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToConnectionFailure()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setMetricsHandler(com.github.kristofa.brave.SpanCollectorMetricsHandler)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/testCollectorMetricsWhenSpansDroppedDueToConnectionFailure()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorMetricsTest/afterClass()#com/github/kristofa/brave/scribe/ScribeServer/stop()
com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)#java/util/logging/Logger/fine(java.lang.String)
com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)#com/github/kristofa/brave/ServerTracer/setServerSend()
com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)#com/github/kristofa/brave/ServerResponseAdapter/responseAnnotations()
com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_LocalSpanAndEndpoint/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_LocalSpanAndEndpoint/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_LocalSpanAndEndpoint/equals(java.lang.Object)#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/state()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#kafka/serializer/DefaultDecoder/DefaultDecoder(kafka.utils.VerifiableProperties)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/kristofa/brave/kafka/KafkaSpanCollector/close()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/charithe/kafka/KafkaJunitRule/consumerConfig()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/kristofa/brave/kafka/KafkaSpanCollector/KafkaSpanCollector(java.lang.String,com.github.kristofa.brave.SpanCollectorMetricsHandler)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#java/util/concurrent/Future/get(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/charithe/kafka/KafkaJunitRule/kafkaBrokerPort()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#java/util/List/size()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()/$anonymous2/()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()/$anonymous1/()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#java/util/concurrent/Executors/newFixedThreadPool(int)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#com/github/charithe/kafka/KafkaJunitRule/readMessages(java.lang.String,int,kafka.serializer.Decoder)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitMultipleSpansInParallel()#kafka/consumer/ConsumerConfig/props()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#kafka/serializer/DefaultDecoder/DefaultDecoder(kafka.utils.VerifiableProperties)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/kristofa/brave/kafka/KafkaSpanCollector/close()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/charithe/kafka/KafkaJunitRule/consumerConfig()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/kristofa/brave/kafka/KafkaSpanCollector/KafkaSpanCollector(java.lang.String,com.github.kristofa.brave.SpanCollectorMetricsHandler)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/kristofa/brave/kafka/ITKafkaSpanCollector/span(long,java.lang.String)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/charithe/kafka/KafkaJunitRule/kafkaBrokerPort()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#java/util/List/size()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/kristofa/brave/kafka/KafkaSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#java/util/List/get(int)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#com/github/charithe/kafka/KafkaJunitRule/readMessages(java.lang.String,int,kafka.serializer.Decoder)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#kafka/consumer/ConsumerConfig/props()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/submitSingleSpan()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)#org/apache/thrift/TDeserializer/deserialize(org.apache.thrift.TBase,byte[])
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)#org/apache/thrift/protocol/TBinaryProtocol/Factory/Factory()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)#java/util/List/add(E)
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/kafka/ITKafkaSpanCollector/getCollectedSpans(java.util.List)#org/apache/thrift/TDeserializer/TDeserializer(org.apache.thrift.protocol.TProtocolFactory)
com/github/kristofa/brave/IdConversion/convertToString(long)#java/lang/Long/toHexString(long)
com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)#java/lang/String/length()
com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)#java/lang/String/toCharArray()
com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)#java/lang/NumberFormatException/NumberFormatException(java.lang.String)
com/github/kristofa/brave/resteasy/SpanNameProviderConfig/spanNameProvider()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateZero()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateZero()#com/github/kristofa/brave/FixedSampleRateTraceFilter/trace(long,java.lang.String)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateZero()#com/github/kristofa/brave/FixedSampleRateTraceFilter/FixedSampleRateTraceFilter(int)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateBiggerThanOne()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateBiggerThanOne()#com/github/kristofa/brave/FixedSampleRateTraceFilter/trace(long,java.lang.String)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateBiggerThanOne()#com/github/kristofa/brave/FixedSampleRateTraceFilter/FixedSampleRateTraceFilter(int)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateBiggerThanOne()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateNegative()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateNegative()#com/github/kristofa/brave/FixedSampleRateTraceFilter/trace(long,java.lang.String)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateNegative()#com/github/kristofa/brave/FixedSampleRateTraceFilter/FixedSampleRateTraceFilter(int)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateOne()#com/github/kristofa/brave/FixedSampleRateTraceFilter/trace(long,java.lang.String)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateOne()#com/github/kristofa/brave/FixedSampleRateTraceFilter/FixedSampleRateTraceFilter(int)
com/github/kristofa/brave/FixedSampleRateTraceFilterTest/testSampleRateOne()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/Builder()
com/github/kristofa/brave/BraveConfig/brave()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/traceSampler(com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/resteasy/ITBraveResteasy/tearDown()#org/eclipse/jetty/util/component/AbstractLifeCycle/stop()
com/github/kristofa/brave/resteasy/ITBraveResteasy/tearDown()#org/eclipse/jetty/server/Server/join()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getParent_id()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#org/jboss/resteasy/client/ClientResponse/releaseConnection()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/github/kristofa/brave/resteasy/SpanCollectorForTesting/getCollectedSpans()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#java/util/List/size()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/twitter/zipkin/gen/Annotation/getHost()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#javax/ws/rs/core/Response/getStatus()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#org/jboss/resteasy/plugins/providers/RegisterBuiltin/register(org.jboss.resteasy.spi.ResteasyProviderFactory)
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#org/jboss/resteasy/spi/ResteasyProviderFactory/getInstance()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/github/kristofa/brave/resteasy/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/github/kristofa/brave/resteasy/BraveRestEasyResource/a()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#org/jboss/resteasy/client/ProxyFactory/create(java.lang.Class,java.lang.String)
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#java/util/List/get(int)
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#org/junit/Assert/assertEquals(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/resteasy/ITBraveResteasy/test()#org/junit/Assert/assertEquals(java.lang.String,long,long)
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#java/lang/IllegalStateException/IllegalStateException(java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/webapp/WebAppContext/setServer(org.eclipse.jetty.server.Server)
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/server/AbstractConnector/setPort(int)
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/server/AbstractConnector/setMaxIdleTime(int)
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/server/handler/ContextHandler/setContextPath(java.lang.String)
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/server/bio/SocketConnector/SocketConnector()
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/webapp/WebAppContext/WebAppContext()
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/util/component/AbstractLifeCycle/start()
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/webapp/WebAppContext/setWar(java.lang.String)
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/server/Server/Server()
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/server/Server/setConnectors(org.eclipse.jetty.server.Connector[])
com/github/kristofa/brave/resteasy/ITBraveResteasy/setup()#org/eclipse/jetty/server/handler/HandlerWrapper/setHandler(org.eclipse.jetty.server.Handler)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/net/HttpURLConnection/disconnect()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/twitter/zipkin/gen/Span/getParent_id()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/github/kristofa/brave/servlet/SpanCollectorForTesting/getCollectedSpans()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/net/URL/URL(java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/twitter/zipkin/gen/Annotation/getHost()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/net/HttpURLConnection/getResponseCode()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/github/kristofa/brave/servlet/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/net/URLConnection/connect()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/net/URL/openConnection()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/util/List/size()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/net/HttpURLConnection/setRequestMethod(java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/util/List/get(int)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#org/junit/Assert/assertEquals(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#org/junit/Assert/assertEquals(java.lang.String,long,long)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#java/net/URLConnection/addRequestProperty(java.lang.String,java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/test()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#java/lang/IllegalStateException/IllegalStateException(java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/webapp/WebAppContext/setServer(org.eclipse.jetty.server.Server)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/server/AbstractConnector/setPort(int)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/servlet/FilterHolder/FilterHolder(javax.servlet.Filter)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/servlet/ServletContextHandler/addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/servlet/ITBraveServletFilter/PingServlet/PingServlet()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/Brave/serverResponseInterceptor()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/servlet/ServletContextHandler/addFilter(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/util/component/AbstractLifeCycle/start()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#java/util/EnumSet/allOf(java.lang.Class)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/Brave/Builder/Builder(java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/servlet/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/servlet/ServletHolder/ServletHolder(javax.servlet.Servlet)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/webapp/WebAppContext/setWar(java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/server/Server/Server()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/servlet/ITBraveServletFilter/ForwardServlet/ForwardServlet()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/server/AbstractConnector/setMaxIdleTime(int)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/server/handler/ContextHandler/setContextPath(java.lang.String)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/server/bio/SocketConnector/SocketConnector()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/webapp/WebAppContext/WebAppContext()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/servlet/BraveServletFilter/BraveServletFilter(com.github.kristofa.brave.ServerRequestInterceptor,com.github.kristofa.brave.ServerResponseInterceptor,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/server/Server/setConnectors(org.eclipse.jetty.server.Connector[])
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#com/github/kristofa/brave/Brave/serverRequestInterceptor()
com/github/kristofa/brave/servlet/ITBraveServletFilter/setup()#org/eclipse/jetty/server/handler/HandlerWrapper/setHandler(org.eclipse.jetty.server.Handler)
com/github/kristofa/brave/servlet/ITBraveServletFilter/tearDown()#org/eclipse/jetty/util/component/AbstractLifeCycle/stop()
com/github/kristofa/brave/servlet/ITBraveServletFilter/tearDown()#com/github/kristofa/brave/servlet/SpanCollectorForTesting/clear()
com/github/kristofa/brave/servlet/ITBraveServletFilter/tearDown()#org/eclipse/jetty/server/Server/join()
com/github/kristofa/brave/servlet/ITBraveServletFilter/tearDown()#com/github/kristofa/brave/servlet/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/resteasy/RestEasyHttpClientResponse/getHttpStatusCode()#javax/ws/rs/core/Response/getStatus()
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpan()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpan()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerSpanThreadBinderTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ServerSpanThreadBinderTest/setup()#com/github/kristofa/brave/ServerSpanThreadBinder/ServerSpanThreadBinder(com.github.kristofa.brave.ServerSpanState)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpanNullServerSpan()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpanNullServerSpan()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpanNullServerSpan()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpanNullServerSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpanNullServerSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpan()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpan()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpan()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpan()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerSpanThreadBinderTest/testGetCurrentServerSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testConstructorNullState()#com/github/kristofa/brave/ServerSpanThreadBinder/ServerSpanThreadBinder(com.github.kristofa.brave.ServerSpanState)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpanNull()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpanNull()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpanNull()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerSpanThreadBinderTest/testSetCurrentSpanNull()#org/mockito/Mockito/verify(T)
com/twitter/zipkin/gen/Endpoint/isSetIpv4()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/read(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/Endpoint/deepCopy()#com/twitter/zipkin/gen/Endpoint/Endpoint(com.twitter.zipkin.gen.Endpoint)
com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/write(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/Endpoint/unsetPort()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Endpoint/isSet(com.twitter.zipkin.gen.Endpoint._Fields)#com/twitter/zipkin/gen/Endpoint/isSetService_name()
com/twitter/zipkin/gen/Endpoint/isSet(com.twitter.zipkin.gen.Endpoint._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/Endpoint/isSet(com.twitter.zipkin.gen.Endpoint._Fields)#com/twitter/zipkin/gen/Endpoint/isSetPort()
com/twitter/zipkin/gen/Endpoint/isSet(com.twitter.zipkin.gen.Endpoint._Fields)#com/twitter/zipkin/gen/Endpoint/isSetIpv4()
com/twitter/zipkin/gen/Endpoint/isSet(com.twitter.zipkin.gen.Endpoint._Fields)#java/lang/IllegalArgumentException/IllegalArgumentException()
com/twitter/zipkin/gen/Endpoint/readObject(java.io.ObjectInputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/twitter/zipkin/gen/Endpoint/readObject(java.io.ObjectInputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/Endpoint/readObject(java.io.ObjectInputStream)#com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Endpoint/readObject(java.io.ObjectInputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/Endpoint/clear()#com/twitter/zipkin/gen/Endpoint/setPortIsSet(boolean)
com/twitter/zipkin/gen/Endpoint/clear()#com/twitter/zipkin/gen/Endpoint/setIpv4IsSet(boolean)
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#java/lang/String/compareTo(java.lang.String)
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/isSetPort()
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#java/lang/Boolean/compareTo(java.lang.Boolean)
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#java/lang/Class/getName()
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#java/lang/Object/equals(java.lang.Object)
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/isSetService_name()
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/TBaseHelper/compareTo(int,int)
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/isSetIpv4()
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/TBaseHelper/compareTo(java.lang.String,java.lang.String)
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#java/lang/Object/getClass()
com/twitter/zipkin/gen/Endpoint/compareTo(com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/TBaseHelper/compareTo(short,short)
com/twitter/zipkin/gen/Endpoint/unsetIpv4()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Endpoint/setFieldValue(com.twitter.zipkin.gen.Endpoint._Fields,java.lang.Object)#com/twitter/zipkin/gen/Endpoint/unsetPort()
com/twitter/zipkin/gen/Endpoint/setFieldValue(com.twitter.zipkin.gen.Endpoint._Fields,java.lang.Object)#com/twitter/zipkin/gen/Endpoint/unsetIpv4()
com/twitter/zipkin/gen/Endpoint/setFieldValue(com.twitter.zipkin.gen.Endpoint._Fields,java.lang.Object)#com/twitter/zipkin/gen/Endpoint/setService_name(java.lang.String)
com/twitter/zipkin/gen/Endpoint/setFieldValue(com.twitter.zipkin.gen.Endpoint._Fields,java.lang.Object)#com/twitter/zipkin/gen/Endpoint/setPort(short)
com/twitter/zipkin/gen/Endpoint/setFieldValue(com.twitter.zipkin.gen.Endpoint._Fields,java.lang.Object)#com/twitter/zipkin/gen/Endpoint/unsetService_name()
com/twitter/zipkin/gen/Endpoint/setFieldValue(com.twitter.zipkin.gen.Endpoint._Fields,java.lang.Object)#com/twitter/zipkin/gen/Endpoint/setIpv4(int)
com/twitter/zipkin/gen/Endpoint/setService_name(java.lang.String)#java/lang/String/toLowerCase()
com/twitter/zipkin/gen/Endpoint/setPortIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Endpoint/toString()#java/lang/StringBuilder/append(java.lang.String)
com/twitter/zipkin/gen/Endpoint/toString()#java/lang/StringBuilder/append(int)
com/twitter/zipkin/gen/Endpoint/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
com/twitter/zipkin/gen/Endpoint/toString()#java/lang/StringBuilder/toString()
com/twitter/zipkin/gen/Endpoint/equals(java.lang.Object)#com/twitter/zipkin/gen/Endpoint/equals(com.twitter.zipkin.gen.Endpoint)
com/twitter/zipkin/gen/Endpoint/setIpv4IsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Endpoint/getFieldValue(com.twitter.zipkin.gen.Endpoint._Fields)#com/twitter/zipkin/gen/Endpoint/getService_name()
com/twitter/zipkin/gen/Endpoint/getFieldValue(com.twitter.zipkin.gen.Endpoint._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/Endpoint/getFieldValue(com.twitter.zipkin.gen.Endpoint._Fields)#java/lang/Short/valueOf(short)
com/twitter/zipkin/gen/Endpoint/getFieldValue(com.twitter.zipkin.gen.Endpoint._Fields)#com/twitter/zipkin/gen/Endpoint/getPort()
com/twitter/zipkin/gen/Endpoint/getFieldValue(com.twitter.zipkin.gen.Endpoint._Fields)#com/twitter/zipkin/gen/Endpoint/getIpv4()
com/twitter/zipkin/gen/Endpoint/getFieldValue(com.twitter.zipkin.gen.Endpoint._Fields)#java/lang/Integer/valueOf(int)
com/twitter/zipkin/gen/Endpoint/fieldForId(int)#com/twitter/zipkin/gen/Endpoint/_Fields/findByThriftId(int)
com/twitter/zipkin/gen/Endpoint/setPort(short)#com/twitter/zipkin/gen/Endpoint/setPortIsSet(boolean)
com/twitter/zipkin/gen/Endpoint/isSetPort()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Endpoint/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/Endpoint/writeObject(java.io.ObjectOutputStream)#com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Endpoint/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/twitter/zipkin/gen/Endpoint/writeObject(java.io.ObjectOutputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/Endpoint/setIpv4(int)#com/twitter/zipkin/gen/Endpoint/setIpv4IsSet(boolean)
com/twitter/zipkin/gen/Endpoint/hashCode()#java/util/ArrayList/ArrayList()
com/twitter/zipkin/gen/Endpoint/hashCode()#com/twitter/zipkin/gen/Endpoint/isSetService_name()
com/twitter/zipkin/gen/Endpoint/hashCode()#java/util/List/hashCode()
com/twitter/zipkin/gen/Endpoint/hashCode()#java/util/List/add(E)
com/twitter/zipkin/gen/Endpoint/equals(com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/isSetService_name()
com/twitter/zipkin/gen/Endpoint/equals(com.twitter.zipkin.gen.Endpoint)#java/lang/String/equals(java.lang.Object)
com/github/kristofa/brave/jersey2/BraveJerseyTestResource/testEndpoint()#javax/ws/rs/core/Response/ResponseBuilder/build()
com/github/kristofa/brave/jersey2/BraveJerseyTestResource/testEndpoint()#javax/ws/rs/core/Response/status(int)
com/github/kristofa/brave/scribe/FreePortProvider/getNewFreePort()#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
com/github/kristofa/brave/scribe/FreePortProvider/getNewFreePort()#com/github/kristofa/brave/scribe/FreePortProvider/freePort()
com/github/kristofa/brave/scribe/FreePortProvider/getNewFreePort()#java/util/List/add(E)
com/github/kristofa/brave/scribe/FreePortProvider/getNewFreePort()#java/util/List/contains(java.lang.Object)
com/github/kristofa/brave/scribe/FreePortProvider/freePort()#java/lang/IllegalStateException/IllegalStateException(java.lang.Throwable)
com/github/kristofa/brave/scribe/FreePortProvider/freePort()#java/net/ServerSocket/getLocalPort()
com/github/kristofa/brave/scribe/FreePortProvider/freePort()#java/net/ServerSocket/ServerSocket(int)
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#com/github/kristofa/brave/ClientRequestAdapter/getSpanName()
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#com/github/kristofa/brave/ClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/ClientRequestInterceptorTest/testNoSpanIdReturned()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ClientRequestInterceptorTest/setup()#com/github/kristofa/brave/ClientRequestInterceptor/ClientRequestInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/getClientServiceName()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/getSpanName()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/requestAnnotations()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedNoAnnotationsProvided()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/getClientServiceName()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/requestAnnotations()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/ClientRequestInterceptorTest/testSpanIdReturnedAnnotationsProvided()#com/github/kristofa/brave/ClientRequestAdapter/getSpanName()
com/github/kristofa/brave/http/HttpClientResponseAdapter/responseAnnotations()#com/github/kristofa/brave/http/HttpResponse/getHttpStatusCode()
com/github/kristofa/brave/http/HttpClientResponseAdapter/responseAnnotations()#com/github/kristofa/brave/KeyValueAnnotation/create(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpClientResponseAdapter/responseAnnotations()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/http/HttpClientResponseAdapter/responseAnnotations()#java/lang/String/valueOf(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#java/util/concurrent/ExecutorService/invokeAny(java.util.Collection)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#java/util/List/add(E)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#com/github/kristofa/brave/BraveExecutorService/invokeAny(java.util.Collection)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfT()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#java/util/concurrent/ExecutorService/invokeAll(java.util.Collection)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#java/util/List/add(E)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#com/github/kristofa/brave/BraveExecutorService/invokeAll(java.util.Collection)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfT()#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsShutdown()#java/util/concurrent/ExecutorService/isShutdown()
com/github/kristofa/brave/BraveExecutorServiceTest/testIsShutdown()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsShutdown()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsShutdown()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsShutdown()#com/github/kristofa/brave/BraveExecutorService/isShutdown()
com/github/kristofa/brave/BraveExecutorServiceTest/testIsShutdown()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testIsShutdown()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#com/github/kristofa/brave/BraveExecutorService/invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/List/add(E)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAnyCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/concurrent/ExecutorService/invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#com/github/kristofa/brave/BraveExecutorService/submit(java.util.concurrent.Callable)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitCallableOfT()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/setup()#com/github/kristofa/brave/BraveExecutorService/BraveExecutorService(java.util.concurrent.ExecutorService,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#java/util/concurrent/Executor/execute(java.lang.Runnable)
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#com/github/kristofa/brave/BraveExecutorService/execute(java.lang.Runnable)
com/github/kristofa/brave/BraveExecutorServiceTest/testExecute()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/List/add(E)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/concurrent/ExecutorService/invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testInvokeAllCollectionOfQextendsCallableOfTLongTimeUnit()#com/github/kristofa/brave/BraveExecutorService/invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsTerminated()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsTerminated()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsTerminated()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testIsTerminated()#java/util/concurrent/ExecutorService/isTerminated()
com/github/kristofa/brave/BraveExecutorServiceTest/testIsTerminated()#com/github/kristofa/brave/BraveExecutorService/isTerminated()
com/github/kristofa/brave/BraveExecutorServiceTest/testIsTerminated()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testIsTerminated()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testAwaitTermination()#com/github/kristofa/brave/BraveExecutorService/awaitTermination(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorServiceTest/testAwaitTermination()#java/util/concurrent/ExecutorService/awaitTermination(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorServiceTest/testAwaitTermination()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testAwaitTermination()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#java/util/concurrent/ExecutorService/submit(java.lang.Runnable,T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#com/github/kristofa/brave/BraveExecutorService/submit(java.lang.Runnable,T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnableT()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#java/util/concurrent/ExecutorService/submit(java.lang.Runnable)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#com/github/kristofa/brave/BraveExecutorService/submit(java.lang.Runnable)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testSubmitRunnable()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#com/github/kristofa/brave/BraveExecutorService/shutdownNow()
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdownNow()#java/util/concurrent/ExecutorService/shutdownNow()
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdown()#com/github/kristofa/brave/BraveExecutorService/shutdown()
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdown()#java/util/concurrent/ExecutorService/shutdown()
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdown()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveExecutorServiceTest/testShutdown()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#junit/framework/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalse()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#junit/framework/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledZero()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#junit/framework/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataNoSampledHeader()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#junit/framework/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledFalseUpperCase()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#junit/framework/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledOneNoParentId()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#java/lang/Long/valueOf(long)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueWithParentId()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/setup()#com/github/kristofa/brave/http/HttpServerRequestAdapter/HttpServerRequestAdapter(com.github.kristofa.brave.http.HttpServerRequest,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#junit/framework/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoParentId()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#junit/framework/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/http/HttpServerRequestAdapterTest/getTraceDataSampledTrueNoOtherTraceHeaders()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementAcceptedSpans(int)
com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/concurrent/BlockingQueue/offer(E)
com/github/kristofa/brave/http/HttpSpanCollector/create(java.lang.String,com.github.kristofa.brave.SpanCollectorMetricsHandler)#com/github/kristofa/brave/http/HttpSpanCollector/Config/Builder/build()
com/github/kristofa/brave/http/HttpSpanCollector/create(java.lang.String,com.github.kristofa.brave.SpanCollectorMetricsHandler)#com/github/kristofa/brave/http/HttpSpanCollector/Config/builder()
com/github/kristofa/brave/http/HttpSpanCollector/create(java.lang.String,com.github.kristofa.brave.SpanCollectorMetricsHandler)#com/github/kristofa/brave/http/HttpSpanCollector/HttpSpanCollector(java.lang.String,com.github.kristofa.brave.http.HttpSpanCollector.Config,com.github.kristofa.brave.SpanCollectorMetricsHandler)
com/github/kristofa/brave/http/HttpSpanCollector/close()#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/http/HttpSpanCollector/close()#java/util/concurrent/BlockingQueue/drainTo(java.util.Collection)
com/github/kristofa/brave/http/HttpSpanCollector/close()#java/util/LinkedList/LinkedList()
com/github/kristofa/brave/http/HttpSpanCollector/close()#java/util/concurrent/ExecutorService/shutdown()
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URL/openConnection()
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URLConnection/setConnectTimeout(int)
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URL/URL(java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/HttpURLConnection/setRequestMethod(java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URLConnection/getOutputStream()
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/HttpURLConnection/setFixedLengthStreamingMode(int)
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URLConnection/addRequestProperty(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/io/OutputStream/write(byte[])
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URLConnection/getInputStream()
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/io/InputStream/read()
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URLConnection/setReadTimeout(int)
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/HttpURLConnection/getErrorStream()
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#java/net/URLConnection/setDoOutput(boolean)
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#com/github/kristofa/brave/http/HttpSpanCollector/Config/readTimeout()
com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])#com/github/kristofa/brave/http/HttpSpanCollector/Config/connectTimeout()
com/github/kristofa/brave/http/HttpSpanCollector/flush()#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#java/util/concurrent/BlockingQueue/drainTo(java.util.Collection)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#org/apache/thrift/protocol/TBinaryProtocol/writeListBegin(org.apache.thrift.protocol.TList)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#java/util/Collection/isEmpty()
com/github/kristofa/brave/http/HttpSpanCollector/flush()#org/apache/thrift/transport/TMemoryBuffer/TMemoryBuffer(int)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#java/util/Collection/size()
com/github/kristofa/brave/http/HttpSpanCollector/flush()#org/apache/thrift/protocol/TList/TList(byte,int)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#com/github/kristofa/brave/http/HttpSpanCollector/postSpans(byte[])
com/github/kristofa/brave/http/HttpSpanCollector/flush()#org/apache/thrift/transport/TMemoryBuffer/getArray()
com/github/kristofa/brave/http/HttpSpanCollector/flush()#org/apache/thrift/protocol/TBinaryProtocol/writeListEnd()
com/github/kristofa/brave/http/HttpSpanCollector/flush()#java/util/ArrayDeque/ArrayDeque(int)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#org/apache/thrift/protocol/TBinaryProtocol/TBinaryProtocol(org.apache.thrift.transport.TTransport)
com/github/kristofa/brave/http/HttpSpanCollector/flush()#java/util/Queue/remove()
com/github/kristofa/brave/http/HttpSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException()
com/github/kristofa/brave/http/HttpSpanCollector/create(java.lang.String,com.github.kristofa.brave.http.HttpSpanCollector.Config,com.github.kristofa.brave.SpanCollectorMetricsHandler)#com/github/kristofa/brave/http/HttpSpanCollector/HttpSpanCollector(java.lang.String,com.github.kristofa.brave.http.HttpSpanCollector.Config,com.github.kristofa.brave.SpanCollectorMetricsHandler)
com/github/kristofa/brave/scribe/ScribeSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)#java/util/Set/add(E)
com/github/kristofa/brave/scribe/ScribeSpanCollector/createZipkinCollectorClientProvider(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)#java/lang/IllegalStateException/IllegalStateException(java.lang.Throwable)
com/github/kristofa/brave/scribe/ScribeSpanCollector/createZipkinCollectorClientProvider(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/getSocketTimeout()
com/github/kristofa/brave/scribe/ScribeSpanCollector/createZipkinCollectorClientProvider(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/scribe/ScribeSpanCollector/createZipkinCollectorClientProvider(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)#com/github/kristofa/brave/scribe/ScribeClientProvider/ScribeClientProvider(java.lang.String,int,int)
com/github/kristofa/brave/scribe/ScribeSpanCollector/createZipkinCollectorClientProvider(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)#com/github/kristofa/brave/scribe/ScribeClientProvider/setup()
com/github/kristofa/brave/scribe/ScribeSpanCollector/createZipkinCollectorClientProvider(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/failOnSetup()
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/fine(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/warning(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementAcceptedSpans(int)
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/Set/isEmpty()
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/concurrent/BlockingQueue/offer(E)
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/isLoggable(java.util.logging.Level)
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#java/util/Collection/size()
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#com/github/kristofa/brave/scribe/SpanProcessingThread/stop()
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#java/util/concurrent/Future/get()
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#java/util/concurrent/ExecutorService/shutdown()
com/github/kristofa/brave/scribe/ScribeSpanCollector/close()#com/github/kristofa/brave/scribe/ScribeClientProvider/close()
com/github/kristofa/brave/jaxrs2/JaxRs2HttpServerRequest/getUri()#javax/ws/rs/container/ContainerRequestContext/getUriInfo()
com/github/kristofa/brave/jaxrs2/JaxRs2HttpServerRequest/getUri()#javax/ws/rs/core/UriInfo/getRequestUri()
com/github/kristofa/brave/jaxrs2/JaxRs2HttpServerRequest/getHttpMethod()#javax/ws/rs/container/ContainerRequestContext/getMethod()
com/github/kristofa/brave/jaxrs2/JaxRs2HttpServerRequest/getHttpHeaderValue(java.lang.String)#javax/ws/rs/container/ContainerRequestContext/getHeaderString(java.lang.String)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TCompactProtocol/writeI32(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/ResultCode/getValue()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TTupleProtocol/writeBitSet(java.util.BitSet,int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/scribe/Log_result/isSetSuccess()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#java/util/BitSet/BitSet()
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#java/util/BitSet/set(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#java/util/BitSet/get(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TTupleProtocol/readBitSet(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/ResultCode/findByValue(int)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#com/twitter/zipkin/gen/scribe/Log_result/setSuccessIsSet(boolean)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_result)#org/apache/thrift/protocol/TCompactProtocol/readI32()
com/github/kristofa/brave/example/TestServerClientAndLocalSpanStateCompilation/getClientEndpoint()#com/twitter/zipkin/gen/Endpoint/setService_name(java.lang.String)
com/github/kristofa/brave/example/TestServerClientAndLocalSpanStateCompilation/getClientEndpoint()#com/twitter/zipkin/gen/Endpoint/Endpoint(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/example/TestServerClientAndLocalSpanStateCompilation/sample()#com/github/kristofa/brave/ServerSpan/getSample()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/tearDown()#org/apache/curator/test/TestingServer/close()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/tearDown()#com/github/kristofa/brave/sampler/ZooKeeperSampler/close()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/zeroMeansDropAllTraces()#org/assertj/core/api/Assertions/assertThat(java.util.concurrent.CompletableFuture)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/zeroMeansDropAllTraces()#com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/zeroMeansDropAllTraces()#java/util/stream/LongStream/of(long[])
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/retain10Percent()#org/assertj/core/api/AbstractLongAssert/isCloseTo(long,org.assertj.core.data.Percentage)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/retain10Percent()#com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/retain10Percent()#org/assertj/core/data/Percentage/withPercentage(double)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/retain10Percent()#java/util/stream/LongStream/of(long[])
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/retain10Percent()#org/assertj/core/api/Assertions/assertThat(long)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/oneMeansKeepAllTraces()#org/assertj/core/api/Assertions/assertThat(java.util.concurrent.CompletableFuture)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/oneMeansKeepAllTraces()#com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/oneMeansKeepAllTraces()#java/util/stream/LongStream/of(long[])
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/dropsWhenZNodeIsAbsent()#org/assertj/core/api/Assertions/assertThat(java.util.concurrent.CompletableFuture)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/dropsWhenZNodeIsAbsent()#java/util/stream/LongStream/of(long[])
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)#java/lang/Thread/sleep(long)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)#org/apache/curator/framework/api/CreateBuilder/creatingParentsIfNeeded()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)#java/lang/String/getBytes()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)#org/apache/curator/framework/CuratorFramework/create()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)#com/github/kristofa/brave/sampler/ZooKeeperSampler/getZkCurator()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)#org/apache/curator/framework/api/PathAndBytesable/forPath(java.lang.String,byte[])
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setRate(float)#java/lang/String/valueOf(float)
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setup()#org/apache/curator/test/TestingServer/getConnectString()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setup()#org/apache/curator/test/TestingServer/TestingServer()
com/github/kristofa/brave/sampler/ZooKeeperSamplerTest/setup()#com/github/kristofa/brave/sampler/ZooKeeperSampler/ZooKeeperSampler(java.lang.String,java.lang.String)
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ServerSpanAndEndpoint/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ServerSpanAndEndpoint/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ServerSpanAndEndpoint/equals(java.lang.Object)#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getUri()#javax/ws/rs/core/UriInfo/getBaseUri()
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getUri()#org/jboss/resteasy/spi/HttpRequest/getUri()
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getHttpMethod()#org/jboss/resteasy/spi/HttpRequest/getHttpMethod()
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getHttpHeaderValue(java.lang.String)#org/jboss/resteasy/spi/HttpRequest/getHttpHeaders()
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getHttpHeaderValue(java.lang.String)#javax/ws/rs/core/HttpHeaders/getRequestHeader(java.lang.String)
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getHttpHeaderValue(java.lang.String)#java/util/List/isEmpty()
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getHttpHeaderValue(java.lang.String)#java/util/Iterator/next()
com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/getHttpHeaderValue(java.lang.String)#java/util/List/iterator()
com/github/kristofa/brave/AutoValue_ClientTracer/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_ClientTracer/equals(java.lang.Object)#com/github/kristofa/brave/ClientTracer/randomGenerator()
com/github/kristofa/brave/AutoValue_ClientTracer/equals(java.lang.Object)#com/github/kristofa/brave/ClientTracer/traceSampler()
com/github/kristofa/brave/AutoValue_ClientTracer/equals(java.lang.Object)#com/github/kristofa/brave/ClientTracer/spanAndEndpoint()
com/github/kristofa/brave/AutoValue_ClientTracer/equals(java.lang.Object)#com/github/kristofa/brave/ClientTracer/spanCollector()
com/github/kristofa/brave/AutoValue_ClientTracer/hashCode()#java/lang/Object/hashCode()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TCompactProtocol/writeI32(int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TTupleProtocol/writeBitSet(java.util.BitSet,int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/List/size()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/BitSet/BitSet()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/BitSet/set(int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_args/isSetMessages()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/LogEntry/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/BitSet/get(int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/ArrayList/ArrayList(int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TTupleProtocol/readBitSet(int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/LogEntry/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_args/setMessagesIsSet(boolean)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TList/TList(byte,int)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#java/util/List/add(E)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/LogEntry/LogEntry()
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.scribe.Log_args)#org/apache/thrift/protocol/TCompactProtocol/readI32()
com/github/kristofa/brave/http/HttpSpanCollector/Flusher/run()#java/io/Flushable/flush()
com/github/kristofa/brave/servlet/ITBraveServletFilter/PingServlet/doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)#java/io/PrintStream/println(java.lang.String)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/tearDown()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/tearDown()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentServerSpan()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentServerSpan()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentServerSpan()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentServerSpan()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentServerSpan()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentServerSpan()#org/junit/Assert/assertNull(java.lang.String,java.lang.Object)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentServerSpan()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentClientSpan()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentClientSpan()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentClientSpan()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentClientSpan()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentClientSpan()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentClientSpan()#org/junit/Assert/assertEquals(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/testGetAndSetCurrentClientSpan()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanStateTest/setup()#com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/ThreadLocalServerClientAndLocalSpanState(int,int,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testGetLogger()#com/github/kristofa/brave/LoggingSpanCollector/getLogger()
com/github/kristofa/brave/LoggingSpanCollectorTest/testGetLogger()#com/github/kristofa/brave/LoggingSpanCollector/LoggingSpanCollector()
com/github/kristofa/brave/LoggingSpanCollectorTest/testGetLogger()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/LoggingSpanCollectorTest/testAddDefaultAnnotationEmptyKey()#com/github/kristofa/brave/LoggingSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testAddDefaultAnnotationNullKey()#com/github/kristofa/brave/LoggingSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollect()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollect()#com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollect()#java/util/logging/Logger/isLoggable(java.util.logging.Level)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollect()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollect()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/LoggingSpanCollectorTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/LoggingSpanCollectorTest/setup()#com/github/kristofa/brave/LoggingSpanCollectorTest/setup()/$anonymous1/()
com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/setValue(java.nio.ByteBuffer)
com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)#java/nio/ByteBuffer/wrap(byte[])
com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)#java/lang/String/getBytes()
com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_type(com.twitter.zipkin.gen.AnnotationType)
com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/setKey(java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testAddDefaultAnnotationNullValue()#com/github/kristofa/brave/LoggingSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#com/github/kristofa/brave/LoggingSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingDefaultAnnotations()#java/util/logging/Logger/isLoggable(java.util.logging.Level)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#com/github/kristofa/brave/LoggingSpanCollectorTest/create(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#com/github/kristofa/brave/LoggingSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#java/util/logging/Logger/isLoggable(java.util.logging.Level)
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LoggingSpanCollectorTest/testCollectAfterAddingTwoDefaultAnnotations()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/SpanAndEndpoint/StaticSpanAndEndpoint/create(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Endpoint)#com/github/kristofa/brave/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint/AutoValue_SpanAndEndpoint_StaticSpanAndEndpoint(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/SpanIdTest/testGetSpanId()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/SpanIdTest/testGetSpanId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/SpanIdTest/testHashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/SpanIdTest/testHashCode()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/SpanIdTest/testHashCode()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/SpanIdTest/testToStringNullParent()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/SpanIdTest/testToStringNullParent()#com/github/kristofa/brave/SpanId/toString()
com/github/kristofa/brave/SpanIdTest/testToStringNullParent()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/SpanIdTest/testEquals()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/SpanIdTest/testEquals()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/SpanIdTest/testEquals()#java/lang/String/String()
com/github/kristofa/brave/SpanIdTest/testEquals()#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/SpanIdTest/testEquals()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/SpanIdTest/testGetTraceId()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/SpanIdTest/testGetTraceId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/SpanIdTest/setup()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/SpanIdTest/testToString()#com/github/kristofa/brave/SpanId/toString()
com/github/kristofa/brave/SpanIdTest/testToString()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/SpanIdTest/testSpanIdNullParentId()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/SpanIdTest/testSpanIdNullParentId()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/SpanIdTest/testSpanIdNullParentId()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/SpanIdTest/testGetOptionalParentSpanId()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/SpanIdTest/testGetOptionalParentSpanId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/SpanIdTest/testGetParentSpanId()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/SpanIdTest/testGetParentSpanId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/AutoValue_LocalTracer/Builder/build()#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
com/github/kristofa/brave/AutoValue_LocalTracer/Builder/build()#com/github/kristofa/brave/AutoValue_LocalTracer/AutoValue_LocalTracer(com.github.kristofa.brave.SpanAndEndpoint.LocalSpanAndEndpoint,java.util.Random,com.github.kristofa.brave.SpanCollector,com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/AutoValue_LocalTracer/Builder/build()#java/lang/String/isEmpty()
com/twitter/zipkin/gen/Annotation/AnnotationStandardSchemeFactory/getScheme()#com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/AnnotationStandardScheme()
com/twitter/zipkin/gen/Endpoint/EndpointStandardSchemeFactory/getScheme()#com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/EndpointStandardScheme()
com/github/kristofa/brave/ITBrave/IntegrationTestSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/github/kristofa/brave/ITBrave/IntegrationTestSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardSchemeFactory/getScheme()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/BinaryAnnotationStandardScheme()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardSchemeFactory/getScheme()#com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/LogEntryStandardScheme()
com/twitter/zipkin/gen/Span/SpanStandardSchemeFactory/getScheme()#com/twitter/zipkin/gen/Span/SpanStandardScheme/SpanStandardScheme()
com/github/kristofa/brave/Sampler/create(float)#com/github/kristofa/brave/Sampler/ZipkinSampler/ZipkinSampler(float)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/write_args(org.apache.thrift.protocol.TProtocol)#com/twitter/zipkin/gen/scribe/Log_args/Log_args()
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/write_args(org.apache.thrift.protocol.TProtocol)#com/twitter/zipkin/gen/scribe/Log_args/setMessages(java.util.List)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/write_args(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TMessage/TMessage(java.lang.String,byte,int)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/write_args(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/writeMessageEnd()
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/write_args(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/writeMessageBegin(org.apache.thrift.protocol.TMessage)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/write_args(org.apache.thrift.protocol.TProtocol)#com/twitter/zipkin/gen/scribe/Log_args/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#org/apache/thrift/async/TAsyncClient/getProtocolFactory()
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#org/apache/thrift/async/TAsyncMethodCall/getFrameBuffer()
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#com/twitter/zipkin/gen/scribe/Client/Client(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#java/nio/ByteBuffer/array()
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#org/apache/thrift/protocol/TProtocolFactory/getProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#com/twitter/zipkin/gen/scribe/Client/recv_Log()
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#org/apache/thrift/async/TAsyncMethodCall/getState()
com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/getResult()#org/apache/thrift/transport/TMemoryInputTransport/TMemoryInputTransport(byte[])
com/github/kristofa/brave/jersey/JerseyHttpRequest/getHttpMethod()#com/sun/jersey/api/client/ClientRequest/getMethod()
com/github/kristofa/brave/jersey/JerseyHttpRequest/getUri()#com/sun/jersey/api/client/ClientRequest/getURI()
com/github/kristofa/brave/jersey/JerseyHttpRequest/addHeader(java.lang.String,java.lang.String)#com/sun/jersey/api/client/ClientRequest/getHeaders()
com/github/kristofa/brave/jersey/JerseyHttpRequest/addHeader(java.lang.String,java.lang.String)#javax/ws/rs/core/MultivaluedMap/add(K,V)
com/github/kristofa/brave/ClientTracer/setClientSent()#com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)
com/github/kristofa/brave/ClientTracer/setClientSent(int,int,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/submitStartAnnotation(java.lang.String)
com/github/kristofa/brave/ClientTracer/setClientSent(int,int,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/submitAddress(java.lang.String,int,int,java.lang.String)
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/github/kristofa/brave/ClientTracer/randomGenerator()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/github/kristofa/brave/LocalSpanState/getCurrentLocalSpan()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/github/kristofa/brave/ClientTracer/spanAndEndpoint()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#java/util/Random/nextLong()
com/github/kristofa/brave/ClientTracer/getNewSpanId()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/ClientTracer/setClientReceived()#com/github/kristofa/brave/ClientSpanState/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/ClientTracer/setClientReceived()#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/ClientTracer/setClientReceived()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracer/setClientReceived()#com/github/kristofa/brave/AnnotationSubmitter/submitEndAnnotation(java.lang.String,com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/ClientTracer/setClientReceived()#com/github/kristofa/brave/ClientTracer/spanAndEndpoint()
com/github/kristofa/brave/ClientTracer/setClientReceived()#com/github/kristofa/brave/ClientTracer/spanCollector()
com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)#com/github/kristofa/brave/ClientSpanState/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)#com/github/kristofa/brave/ClientTracer/spanAndEndpoint()
com/github/kristofa/brave/ClientTracer/builder()#com/github/kristofa/brave/AutoValue_ClientTracer/Builder/Builder()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#java/lang/Boolean/equals(java.lang.Object)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/twitter/zipkin/gen/Span/setParent_id(long)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/ClientTracer/traceSampler()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/ClientTracer/spanAndEndpoint()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/ClientSpanState/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/ClientTracer/getNewSpanId()
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)#com/github/kristofa/brave/CommonSpanState/sample()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#java/util/logging/Logger/fine(java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#java/lang/Boolean/equals(java.lang.Object)
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerTracer/setStateNoTracing()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerRequestAdapter/getSpanName()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerRequestAdapter/requestAnnotations()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerRequestAdapter/getTraceData()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)#com/github/kristofa/brave/ServerTracer/setServerReceived()
com/github/kristofa/brave/DropwizardMetricsSpanCollectorMetricsHandlerExample/incrementDroppedSpans(int)#com/codahale/metrics/Meter/mark(long)
com/github/kristofa/brave/DropwizardMetricsSpanCollectorMetricsHandlerExample/incrementDroppedSpans(int)#com/codahale/metrics/MetricRegistry/meter(java.lang.String)
com/github/kristofa/brave/DropwizardMetricsSpanCollectorMetricsHandlerExample/incrementAcceptedSpans(int)#com/codahale/metrics/Meter/mark(long)
com/github/kristofa/brave/DropwizardMetricsSpanCollectorMetricsHandlerExample/incrementAcceptedSpans(int)#com/codahale/metrics/MetricRegistry/meter(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/http/SpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/springframework/http/client/ClientHttpRequestExecution/execute(org.springframework.http.HttpRequest,byte[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/mockito/Matchers/any()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/mockito/stubbing/OngoingStubbing/thenThrow(java.lang.Throwable[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/springframework/mock/http/client/MockClientHttpRequest/MockClientHttpRequest(org.springframework.http.HttpMethod,java.net.URI)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#java/io/IOException/IOException()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#java/net/URI/create(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldLetExceptionOccurringDuringExecuteBlowUp()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/http/SpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/springframework/http/client/ClientHttpRequestExecution/execute(org.springframework.http.HttpRequest,byte[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/mockito/Matchers/any()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/mockito/stubbing/OngoingStubbing/thenThrow(java.lang.Throwable[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/springframework/http/client/ClientHttpResponse/getRawStatusCode()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/springframework/mock/http/client/MockClientHttpRequest/MockClientHttpRequest(org.springframework.http.HttpMethod,java.net.URI)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#java/io/IOException/IOException()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#java/net/URI/create(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldNotBlowUpIfExceptionOccursWhenGettingStatusCode()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/springframework/mock/http/client/MockClientHttpResponse/MockClientHttpResponse(byte[],org.springframework.http.HttpStatus)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/apache/commons/lang3/RandomStringUtils/randomAlphanumeric(int)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/http/SpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/mockito/Matchers/any()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#java/lang/String/valueOf(int)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/springframework/mock/http/client/MockClientHttpRequest/MockClientHttpRequest(org.springframework.http.HttpMethod,java.net.URI)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#java/net/URI/create(java.lang.String)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/springframework/http/client/ClientHttpRequestExecution/execute(org.springframework.http.HttpRequest,byte[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/springframework/http/HttpStatus/value()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptorTest/interceptShouldReportResponseStatus()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/AutoValue_ServerTracer/Builder/build()#com/github/kristofa/brave/AutoValue_ServerTracer/AutoValue_ServerTracer(com.github.kristofa.brave.SpanAndEndpoint.ServerSpanAndEndpoint,java.util.Random,com.github.kristofa.brave.SpanCollector,com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/AutoValue_ServerTracer/Builder/build()#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
com/github/kristofa/brave/AutoValue_ServerTracer/Builder/build()#java/lang/String/isEmpty()
com/github/kristofa/brave/resteasy3/ContainerFiltersConfiguration/getContainerRequestFilter()#com/github/kristofa/brave/jaxrs2/BraveContainerRequestFilter/BraveContainerRequestFilter(com.github.kristofa.brave.ServerRequestInterceptor,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/resteasy3/ContainerFiltersConfiguration/getContainerResponseFilter()#com/github/kristofa/brave/jaxrs2/BraveContainerResponseFilter/BraveContainerResponseFilter(com.github.kristofa.brave.ServerResponseInterceptor)
com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setBatchSize(int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setMetricsHandler(com.github.kristofa.brave.SpanCollectorMetricsHandler)#com/github/kristofa/brave/internal/Util/checkNotNull(T,java.lang.String,java.lang.Object[])
com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setQueueSize(int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setNrOfThreads(int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setSocketTimeout(int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/span()#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/span()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/create(com.github.kristofa.brave.ServerClientAndLocalSpanState)#com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ClientSpanAndEndpoint/AutoValue_SpanAndEndpoint_ClientSpanAndEndpoint(com.github.kristofa.brave.ServerClientAndLocalSpanState)
com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/endpoint()#com/github/kristofa/brave/ClientSpanState/getClientEndpoint()
com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/endpoint()#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/resteasy3/SpanNameProviderConfig/spanNameProvider()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/resteasy/ServiceNameProviderConfig/serviceNameProvider()#com/github/kristofa/brave/http/StringServiceNameProvider/StringServiceNameProvider(java.lang.String)
com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/equals(java.lang.Object)#com/github/kristofa/brave/http/HttpSpanCollector/Config/flushInterval()
com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/equals(java.lang.Object)#com/github/kristofa/brave/http/HttpSpanCollector/Config/readTimeout()
com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/equals(java.lang.Object)#com/github/kristofa/brave/http/HttpSpanCollector/Config/connectTimeout()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/github/kristofa/brave/ClientSpanState/getClientEndpoint()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#java/lang/System/nanoTime()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/github/kristofa/brave/LocalSpanState/getCurrentLocalSpan()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#org/powermock/api/mockito/PowerMockito/when(T)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#java/util/List/get(int)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/twitter/zipkin/gen/BinaryAnnotation/getValue()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/twitter/zipkin/gen/BinaryAnnotation/getKey()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#java/lang/String/String(byte[],java.nio.charset.Charset)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#java/lang/Long/longValue()
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/LocalTracerTest/startNewSpan()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#com/github/kristofa/brave/LocalTracer/finishSpan()
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#org/powermock/api/mockito/PowerMockito/when(T)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestamp()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/LocalTracerTest/startSpan_unsampled()#com/github/kristofa/brave/LocalTracer/Builder/build()
com/github/kristofa/brave/LocalTracerTest/startSpan_unsampled()#com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)
com/github/kristofa/brave/LocalTracerTest/startSpan_unsampled()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/LocalTracerTest/startSpan_unsampled()#com/github/kristofa/brave/LocalTracer/builder(com.github.kristofa.brave.LocalTracer)
com/github/kristofa/brave/LocalTracerTest/startSpan_unsampled()#com/github/kristofa/brave/Sampler/create(float)
com/github/kristofa/brave/LocalTracerTest/startSpan_unsampled()#com/github/kristofa/brave/LocalTracer/Builder/traceSampler(com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/LocalTracerTest/finishSpan_unsampled()#com/github/kristofa/brave/LocalTracer/finishSpan()
com/github/kristofa/brave/LocalTracerTest/finishSpan_unsampled()#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_unsampled()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LocalTracerTest/startSpan_userSuppliedTimestamp()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/LocalTracerTest/startSpan_userSuppliedTimestamp()#com/github/kristofa/brave/LocalSpanState/getCurrentLocalSpan()
com/github/kristofa/brave/LocalTracerTest/startSpan_userSuppliedTimestamp()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/LocalTracerTest/startSpan_userSuppliedTimestamp()#com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)
com/github/kristofa/brave/LocalTracerTest/startSpan_userSuppliedTimestamp()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/LocalTracerTest/startSpan_userSuppliedTimestamp()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#com/github/kristofa/brave/LocalTracer/finishSpan(long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedDuration()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#com/github/kristofa/brave/LocalTracer/finishSpan(long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LocalTracerTest/finishSpan_userSuppliedTimestampAndDuration()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/LocalTracerTest/finishSpan()#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan()#com/github/kristofa/brave/LocalTracer/finishSpan()
com/github/kristofa/brave/LocalTracerTest/finishSpan()#org/powermock/api/mockito/PowerMockito/when(T)
com/github/kristofa/brave/LocalTracerTest/finishSpan()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/LocalTracerTest/finishSpan()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/LocalTracerTest/finishSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/LocalTracerTest/finishSpan()#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/LocalTracerTest/finishSpan()#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan()#java/lang/System/nanoTime()
com/github/kristofa/brave/LocalTracerTest/finishSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LocalTracerTest/finishSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/LocalTracerTest/finishSpan_unsampled_userSuppliedDuration()#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracerTest/finishSpan_unsampled_userSuppliedDuration()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/LocalTracerTest/finishSpan_unsampled_userSuppliedDuration()#com/github/kristofa/brave/LocalTracer/finishSpan(long)
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/LocalTracer/Builder/spanAndEndpoint(com.github.kristofa.brave.SpanAndEndpoint.LocalSpanAndEndpoint)
com/github/kristofa/brave/LocalTracerTest/setup()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/LocalTracer/Builder/randomGenerator(java.util.Random)
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/LocalTracer/Builder/build()
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/LocalTracer/builder()
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/create(com.github.kristofa.brave.ServerClientAndLocalSpanState)
com/github/kristofa/brave/LocalTracerTest/setup()#java/util/Random/nextLong()
com/github/kristofa/brave/LocalTracerTest/setup()#org/powermock/api/mockito/PowerMockito/mockStatic(java.lang.Class,java.lang.Class<?>[])
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/LocalTracer/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/LocalTracerTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/LocalTracerTest/setup()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/Sampler/create(float)
com/github/kristofa/brave/LocalTracerTest/setup()#com/github/kristofa/brave/LocalTracer/Builder/traceSampler(com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/github/kristofa/brave/jersey2/SpanCollectorForTesting/getCollectedSpans()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#java/util/List/size()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#javax/ws/rs/client/SyncInvoker/get()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#javax/ws/rs/core/Response/getStatus()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/github/kristofa/brave/jaxrs2/BraveClientResponseFilter/BraveClientResponseFilter(com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider,com.github.kristofa.brave.ClientResponseInterceptor)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#javax/ws/rs/core/Configurable/register(java.lang.Object)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/twitter/zipkin/gen/Span/getParent_id()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#javax/ws/rs/client/WebTarget/request()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/twitter/zipkin/gen/Annotation/getHost()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#org/glassfish/jersey/test/JerseyTest/target(java.lang.String)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/github/kristofa/brave/jaxrs2/BraveClientRequestFilter/BraveClientRequestFilter(com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider,com.github.kristofa.brave.ClientRequestInterceptor)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#java/util/List/get(int)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#org/junit/Assert/assertEquals(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#org/junit/Assert/assertEquals(java.lang.String,long,long)
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#com/github/kristofa/brave/jersey2/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/jersey2/ITBraveJersey2/testBraveJersey2()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/jersey2/ITBraveJersey2/configure()#org/springframework/context/annotation/AnnotationConfigApplicationContext/AnnotationConfigApplicationContext(java.lang.Class<?>[])
com/github/kristofa/brave/jersey2/ITBraveJersey2/configure()#com/github/kristofa/brave/jersey2/JerseyTestConfig/JerseyTestConfig()
com/github/kristofa/brave/jersey2/ITBraveJersey2/configure()#org/springframework/beans/factory/BeanFactory/getBean(java.lang.Class)
com/github/kristofa/brave/jersey2/ITBraveJersey2/configure()#org/glassfish/jersey/server/ResourceConfig/property(java.lang.String,java.lang.Object)
com/github/kristofa/brave/BraveCallableTest/testCall()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveCallableTest/testCall()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveCallableTest/testCall()#com/github/kristofa/brave/BraveCallable/call()
com/github/kristofa/brave/BraveCallableTest/testCall()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/BraveCallableTest/testCall()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveCallableTest/testCall()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/BraveCallableTest/testCall()#java/util/concurrent/Callable/call()
com/github/kristofa/brave/BraveCallableTest/testCall()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/BraveCallableTest/testCall()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/BraveCallableTest/testCall()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveCallableTest/setup()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveCallableTest/setup()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveCallableTest/setup()#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveCallableTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveCallableTest/setup()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpan()#com/github/kristofa/brave/ClientSpanThreadBinder/getCurrentClientSpan()
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpan()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpan()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpan()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpan()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpan()#com/github/kristofa/brave/ClientSpanThreadBinder/setCurrentSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpanNullSpan()#com/github/kristofa/brave/ClientSpanThreadBinder/getCurrentClientSpan()
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpanNullSpan()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpanNullSpan()#com/github/kristofa/brave/ClientSpanState/getCurrentClientSpan()
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpanNullSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientSpanThreadBinderTest/testGetCurrentClientSpanNullSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testConstructorNullState()#com/github/kristofa/brave/ClientSpanThreadBinder/ClientSpanThreadBinder(com.github.kristofa.brave.ClientSpanState)
com/github/kristofa/brave/ClientSpanThreadBinderTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ClientSpanThreadBinderTest/setup()#com/github/kristofa/brave/ClientSpanThreadBinder/ClientSpanThreadBinder(com.github.kristofa.brave.ClientSpanState)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpanNull()#com/github/kristofa/brave/ClientSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpanNull()#com/github/kristofa/brave/ClientSpanThreadBinder/setCurrentSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpanNull()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientSpanThreadBinderTest/testSetCurrentSpanNull()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/beginTrace(com.github.kristofa.brave.ClientTracer,java.lang.String,com.mysql.jdbc.Connection)#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/beginTrace(com.github.kristofa.brave.ClientTracer,java.lang.String,com.mysql.jdbc.Connection)#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/beginTrace(com.github.kristofa.brave.ClientTracer,java.lang.String,com.mysql.jdbc.Connection)#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/beginTrace(com.github.kristofa.brave.ClientTracer,java.lang.String,com.mysql.jdbc.Connection)#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/beginTrace(com.github.kristofa.brave.ClientTracer,java.lang.String,com.mysql.jdbc.Connection)#com/mysql/jdbc/Connection/getSchema()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/beginTrace(com.github.kristofa.brave.ClientTracer,java.lang.String,com.mysql.jdbc.Connection)#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/net/InetAddress/getAddress()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/sql/DatabaseMetaData/getURL()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/net/URI/getPort()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/nio/ByteBuffer/getInt()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/net/URI/create(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/lang/String/substring(int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/nio/ByteBuffer/wrap(byte[])
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/sql/Connection/getMetaData()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#java/net/InetAddress/getByName(java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#com/github/kristofa/brave/ClientTracer/setClientSent(int,int,java.lang.String)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientSent(com.github.kristofa.brave.ClientTracer,com.mysql.jdbc.Connection)#com/mysql/jdbc/Connection/getHost()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/endTrace(com.github.kristofa.brave.ClientTracer,int,java.sql.SQLException)#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,int)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/endTrace(com.github.kristofa.brave.ClientTracer,int,java.sql.SQLException)#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/endTrace(com.github.kristofa.brave.ClientTracer,int,java.sql.SQLException)#java/sql/SQLException/getErrorCode()
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/postProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.ResultSetInternalMethods,com.mysql.jdbc.Connection,int,boolean,boolean,java.sql.SQLException)#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/endTrace(com.github.kristofa.brave.ClientTracer,int,java.sql.SQLException)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/beginTrace(com.github.kristofa.brave.ClientTracer,java.lang.String,com.mysql.jdbc.Connection)
com/github/kristofa/brave/mysql/MySQLStatementInterceptor/preProcess(java.lang.String,com.mysql.jdbc.Statement,com.mysql.jdbc.Connection)#com/mysql/jdbc/PreparedStatement/getPreparedSql()
com/github/kristofa/brave/scribe/ScribeClientProvider/exception(org.apache.thrift.TException)#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/scribe/ScribeClientProvider/exception(org.apache.thrift.TException)#com/github/kristofa/brave/scribe/ScribeClientProvider/close()
com/github/kristofa/brave/scribe/ScribeClientProvider/exception(org.apache.thrift.TException)#com/github/kristofa/brave/scribe/ScribeClientProvider/setup()
com/github/kristofa/brave/scribe/ScribeClientProvider/close()#org/apache/thrift/transport/TTransport/close()
com/github/kristofa/brave/scribe/ScribeClientProvider/setup()#com/twitter/zipkin/gen/scribe/Client/Client(org.apache.thrift.protocol.TProtocol)
com/github/kristofa/brave/scribe/ScribeClientProvider/setup()#org/apache/thrift/transport/TSocket/setTimeout(int)
com/github/kristofa/brave/scribe/ScribeClientProvider/setup()#org/apache/thrift/transport/TFramedTransport/TFramedTransport(org.apache.thrift.transport.TTransport)
com/github/kristofa/brave/scribe/ScribeClientProvider/setup()#org/apache/thrift/transport/TSocket/TSocket(java.lang.String,int)
com/github/kristofa/brave/scribe/ScribeClientProvider/setup()#org/apache/thrift/transport/TTransport/open()
com/github/kristofa/brave/scribe/ScribeClientProvider/setup()#org/apache/thrift/protocol/TBinaryProtocol/TBinaryProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/scribe/AsyncClient/Factory/getAsyncClient(org.apache.thrift.transport.TNonblockingTransport)#com/twitter/zipkin/gen/scribe/AsyncClient/AsyncClient(org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.async.TAsyncClientManager,org.apache.thrift.transport.TNonblockingTransport)
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#com/github/kristofa/brave/ClientResponseAdapter/responseAnnotations()
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/ClientResponseInterceptorTest/testNoAnnotationsProvided()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientResponseInterceptorTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ClientResponseInterceptorTest/setup()#com/github/kristofa/brave/ClientResponseInterceptor/ClientResponseInterceptor(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#com/github/kristofa/brave/KeyValueAnnotation/create(java.lang.String,java.lang.String)
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#com/github/kristofa/brave/ClientTracer/setClientReceived()
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/ClientResponseInterceptorTest/testAnnotationsProvided()#com/github/kristofa/brave/ClientResponseAdapter/responseAnnotations()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TCompactProtocol/writeI32(int)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/AnnotationType/getValue()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetKey()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TTupleProtocol/writeBitSet(java.util.BitSet,int)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TCompactProtocol/writeBinary(java.nio.ByteBuffer)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#java/util/BitSet/set(int)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetValue()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetHost()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#java/util/BitSet/BitSet()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetAnnotation_type()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TCompactProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#java/util/BitSet/get(int)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TCompactProtocol/readBinary()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setValueIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TTupleProtocol/readBitSet(int)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/AnnotationType/findByValue(int)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setHostIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setKeyIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TCompactProtocol/readString()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_typeIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TCompactProtocol/readI32()
com/github/kristofa/brave/scribe/SpanProcessingThread/spanToBytes(com.twitter.zipkin.gen.Span)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/github/kristofa/brave/scribe/SpanProcessingThread/spanToBytes(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)
com/github/kristofa/brave/scribe/SpanProcessingThread/spanToBytes(com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocolFactory/getProtocol(org.apache.thrift.transport.TTransport)
com/github/kristofa/brave/scribe/SpanProcessingThread/spanToBytes(com.twitter.zipkin.gen.Span)#java/io/ByteArrayOutputStream/toByteArray()
com/github/kristofa/brave/scribe/SpanProcessingThread/spanToBytes(com.twitter.zipkin.gen.Span)#java/io/ByteArrayOutputStream/ByteArrayOutputStream()
com/github/kristofa/brave/scribe/SpanProcessingThread/log(java.util.List)#java/util/List/size()
com/github/kristofa/brave/scribe/SpanProcessingThread/log(java.util.List)#com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(java.util.List)#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/scribe/SpanProcessingThread/log(java.util.List)#java/util/logging/Logger/isLoggable(java.util.logging.Level)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(java.util.List)#java/util/logging/Logger/fine(java.lang.String)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(java.util.List)#com/github/kristofa/brave/scribe/ScribeClientProvider/getClient()
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#java/util/logging/Logger/warning(java.lang.String)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#com/twitter/zipkin/gen/scribe/Client/Log(java.util.List)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#java/lang/String/format(java.lang.String,java.lang.Object[])
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#com/github/kristofa/brave/scribe/ScribeClientProvider/exception(org.apache.thrift.TException)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#java/util/logging/Logger/fine(java.lang.String)
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#com/github/kristofa/brave/scribe/ScribeClientProvider/getClient()
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#java/lang/Throwable/getMessage()
com/github/kristofa/brave/scribe/SpanProcessingThread/log(com.twitter.zipkin.gen.scribe.Client,java.util.List)#java/util/List/size()
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#com/github/kristofa/brave/scribe/SpanProcessingThread/log(java.util.List)
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#java/util/List/isEmpty()
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#com/github/kristofa/brave/scribe/SpanProcessingThread/create(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#java/util/List/clear()
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#java/util/List/add(E)
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#java/util/List/size()
com/github/kristofa/brave/scribe/SpanProcessingThread/call()#java/util/concurrent/BlockingQueue/poll(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/scribe/SpanProcessingThread/create(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/scribe/SpanProcessingThread/spanToBytes(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/SpanProcessingThread/create(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/LogEntry/LogEntry(java.lang.String,java.lang.String)
com/github/kristofa/brave/scribe/SpanProcessingThread/create(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/scribe/Base64/encode(byte[])
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithoutParentSpanId()#com/github/kristofa/brave/http/HttpClientRequest/addHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithoutParentSpanId()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithoutParentSpanId()#java/lang/String/valueOf(long)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithoutParentSpanId()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithoutParentSpanId()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithoutParentSpanId()#com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithoutParentSpanId()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/setup()#com/github/kristofa/brave/http/HttpClientRequestAdapter/HttpClientRequestAdapter(com.github.kristofa.brave.http.HttpClientRequest,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#java/lang/String/valueOf(java.lang.Object)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#com/github/kristofa/brave/http/HttpClientRequest/addHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#java/lang/String/valueOf(long)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_WithParentSpanId()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getSpanName()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getSpanName()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getSpanName()#com/github/kristofa/brave/http/SpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getSpanName()#com/github/kristofa/brave/http/HttpClientRequestAdapter/getSpanName()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getSpanName()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getSpanName()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getSpanName()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#com/github/kristofa/brave/http/HttpRequest/getUri()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#java/util/Collection/size()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#java/util/Iterator/next()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#java/net/URI/create(java.lang.String)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#java/util/Collection/iterator()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#com/github/kristofa/brave/http/HttpClientRequestAdapter/requestAnnotations()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/requestAnnotations()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getClientServiceName()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getClientServiceName()#com/github/kristofa/brave/http/HttpClientRequestAdapter/getClientServiceName()
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getClientServiceName()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getClientServiceName()#com/github/kristofa/brave/http/ServiceNameProvider/serviceName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getClientServiceName()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getClientServiceName()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/getClientServiceName()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_NoSpanId()#com/github/kristofa/brave/http/HttpClientRequest/addHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_NoSpanId()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_NoSpanId()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_NoSpanId()#com/github/kristofa/brave/http/HttpClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/http/HttpClientRequestAdapterTest/addSpanIdToRequest_NoSpanId()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#com/twitter/zipkin/gen/BinaryAnnotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#com/twitter/zipkin/gen/BinaryAnnotation/setValue(byte[])
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#java/lang/String/getBytes(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_type(com.twitter.zipkin.gen.AnnotationType)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValue()#com/twitter/zipkin/gen/BinaryAnnotation/setKey(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/testCurrentTimeMicroSeconds()#com/github/kristofa/brave/AnnotationSubmitter/currentTimeMicroseconds()
com/github/kristofa/brave/AnnotationSubmitterTest/testCurrentTimeMicroSeconds()#com/github/kristofa/brave/SpanAndEndpoint/StaticSpanAndEndpoint/create(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitterTest/testCurrentTimeMicroSeconds()#com/github/kristofa/brave/AnnotationSubmitter/create(com.github.kristofa.brave.SpanAndEndpoint)
com/github/kristofa/brave/AnnotationSubmitterTest/testCurrentTimeMicroSeconds()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#com/twitter/zipkin/gen/BinaryAnnotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,int)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#com/twitter/zipkin/gen/BinaryAnnotation/setValue(byte[])
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#java/lang/String/valueOf(int)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#java/lang/String/getBytes()
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_type(com.twitter.zipkin.gen.AnnotationType)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationIntValue()#com/twitter/zipkin/gen/BinaryAnnotation/setKey(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValueEmptyKey()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitBinaryAnnotationStringValueNullValue()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#com/github/kristofa/brave/SpanAndEndpoint/StaticSpanAndEndpoint/create(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#org/powermock/api/mockito/PowerMockito/mockStatic(java.lang.Class,java.lang.Class<?>[])
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#org/powermock/api/mockito/PowerMockito/when(T)
com/github/kristofa/brave/AnnotationSubmitterTest/setup()#com/github/kristofa/brave/AnnotationSubmitter/create(com.github.kristofa.brave.SpanAndEndpoint)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#com/twitter/zipkin/gen/Span/addToAnnotations(com.twitter.zipkin.gen.Annotation)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#com/github/kristofa/brave/AnnotationSubmitter/submitAnnotation(java.lang.String)
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/AnnotationSubmitterTest/testSubmitAnnotationSpanEndpointString()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/Brave/Builder/build()#com/github/kristofa/brave/Brave/Brave(com.github.kristofa.brave.Brave.Builder)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetTimestamp()
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TTupleProtocol/writeBitSet(java.util.BitSet,int)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetHost()
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#java/util/BitSet/BitSet()
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#java/util/BitSet/set(int)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TCompactProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TCompactProtocol/writeI64(long)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetValue()
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#java/util/BitSet/get(int)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/setValueIsSet(boolean)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TTupleProtocol/readBitSet(int)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/setHostIsSet(boolean)
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TCompactProtocol/readString()
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TCompactProtocol/readI64()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TCompactProtocol/writeI32(int)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/isSetService_name()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TTupleProtocol/writeBitSet(java.util.BitSet,int)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#java/util/BitSet/BitSet()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/isSetIpv4()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#java/util/BitSet/set(int)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TCompactProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/isSetPort()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TCompactProtocol/writeI16(short)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#java/util/BitSet/get(int)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TCompactProtocol/readI16()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TTupleProtocol/readBitSet(int)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/setPortIsSet(boolean)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/setIpv4IsSet(boolean)
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TCompactProtocol/readString()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TCompactProtocol/readI32()
com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/setService_nameIsSet(boolean)
com/github/kristofa/brave/BraveApiConfig/serverResponseInterceptor()#com/github/kristofa/brave/Brave/serverResponseInterceptor()
com/github/kristofa/brave/BraveApiConfig/serverSpanAnnotationSubmitter()#com/github/kristofa/brave/Brave/serverSpanAnnotationSubmitter()
com/github/kristofa/brave/BraveApiConfig/clientTracer()#com/github/kristofa/brave/Brave/clientTracer()
com/github/kristofa/brave/BraveApiConfig/serverRequestInterceptor()#com/github/kristofa/brave/Brave/serverRequestInterceptor()
com/github/kristofa/brave/BraveApiConfig/clientResponseInterceptor()#com/github/kristofa/brave/Brave/clientResponseInterceptor()
com/github/kristofa/brave/BraveApiConfig/serverTracer()#com/github/kristofa/brave/Brave/serverTracer()
com/github/kristofa/brave/BraveApiConfig/clientRequestInterceptor()#com/github/kristofa/brave/Brave/clientRequestInterceptor()
com/github/kristofa/brave/BraveApiConfig/serverSpanThreadBinder()#com/github/kristofa/brave/Brave/serverSpanThreadBinder()
com/github/kristofa/brave/http/HttpServerResponseAdapter/responseAnnotations()#com/github/kristofa/brave/http/HttpResponse/getHttpStatusCode()
com/github/kristofa/brave/http/HttpServerResponseAdapter/responseAnnotations()#com/github/kristofa/brave/KeyValueAnnotation/create(java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpServerResponseAdapter/responseAnnotations()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/http/HttpServerResponseAdapter/responseAnnotations()#java/lang/String/valueOf(int)
com/github/kristofa/brave/ServerTracer/Builder/state(com.github.kristofa.brave.ServerSpanState)#com/github/kristofa/brave/ServerTracer/Builder/spanAndEndpoint(com.github.kristofa.brave.SpanAndEndpoint.ServerSpanAndEndpoint)
com/github/kristofa/brave/ServerTracer/Builder/state(com.github.kristofa.brave.ServerSpanState)#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/create(com.github.kristofa.brave.ServerSpanState)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/setCategoryIsSet(boolean)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#java/util/BitSet/get(int)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TTupleProtocol/readBitSet(int)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TCompactProtocol/readString()
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/setMessageIsSet(boolean)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/isSetCategory()
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TTupleProtocol/writeBitSet(java.util.BitSet,int)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#java/util/BitSet/BitSet()
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TCompactProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#java/util/BitSet/set(int)
com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/isSetMessage()
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/BitSet/get(int)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/ArrayList/ArrayList(int)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setBinary_annotationsIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/BinaryAnnotation/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setParent_idIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setNameIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setTrace_idIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TList/TList(byte,int)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setIdIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/readI32()
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Annotation/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TTupleProtocol/readBitSet(int)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/readBool()
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setDebugIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/readString()
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setDurationIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Annotation/Annotation()
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setAnnotationsIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/readI64()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetParent_id()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/writeI32(int)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDebug()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetTimestamp()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TTupleProtocol/writeBitSet(java.util.BitSet,int)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/List/size()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetName()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/BitSet/BitSet()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/BitSet/set(int)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/writeI64(long)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDuration()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetTrace_id()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Annotation/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/BinaryAnnotation/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetId()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetBinary_annotations()
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/writeBool(boolean)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TCompactProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/Span/SpanTupleScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetAnnotations()
com/twitter/zipkin/gen/scribe/Client/Factory/getClient(org.apache.thrift.protocol.TProtocol)#com/twitter/zipkin/gen/scribe/Client/Client(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/scribe/Client/Factory/getClient(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)#com/twitter/zipkin/gen/scribe/Client/Client(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
com/github/kristofa/brave/resteasy/BravePostProcessInterceptor/postProcess(org.jboss.resteasy.core.ServerResponse)#com/github/kristofa/brave/resteasy/BravePostProcessInterceptor/postProcess(org/jboss/resteasy/core/ServerResponse)/$anonymous1/()
com/github/kristofa/brave/resteasy/BravePostProcessInterceptor/postProcess(org.jboss.resteasy.core.ServerResponse)#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/resteasy/BravePostProcessInterceptor/postProcess(org.jboss.resteasy.core.ServerResponse)#com/github/kristofa/brave/http/HttpServerResponseAdapter/HttpServerResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/asyncTest()#com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/tearDown()#org/eclipse/jetty/util/component/AbstractLifeCycle/stop()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/tearDown()#org/eclipse/jetty/server/Server/join()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/tearDown()#com/github/kristofa/brave/spring/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/tearDown()#com/github/kristofa/brave/spring/SpanCollectorForTesting/clear()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/syncTest()#com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/net/HttpURLConnection/disconnect()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/twitter/zipkin/gen/Span/getParent_id()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/net/URL/URL(java.lang.String)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/twitter/zipkin/gen/Annotation/getHost()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/net/HttpURLConnection/getResponseCode()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/github/kristofa/brave/spring/SpanCollectorForTesting/getCollectedSpans()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/net/URLConnection/connect()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/net/URL/openConnection()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/util/List/size()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/net/HttpURLConnection/setRequestMethod(java.lang.String)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/github/kristofa/brave/spring/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/util/List/get(int)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#org/junit/Assert/assertEquals(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#org/junit/Assert/assertEquals(java.lang.String,long,long)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#java/net/URLConnection/addRequestProperty(java.lang.String,java.lang.String)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/test(java.lang.String)#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#java/lang/IllegalStateException/IllegalStateException(java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/webapp/WebAppContext/setServer(org.eclipse.jetty.server.Server)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/server/AbstractConnector/setPort(int)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/server/AbstractConnector/setMaxIdleTime(int)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/server/handler/ContextHandler/setContextPath(java.lang.String)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/server/bio/SocketConnector/SocketConnector()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/webapp/WebAppContext/WebAppContext()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/util/component/AbstractLifeCycle/start()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/webapp/WebAppContext/setWar(java.lang.String)
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/server/Server/Server()
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/server/Server/setConnectors(org.eclipse.jetty.server.Connector[])
com/github/kristofa/brave/spring/ITBraveServletHandlerInterceptor/setup()#org/eclipse/jetty/server/handler/HandlerWrapper/setHandler(org.eclipse.jetty.server.Handler)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleSchemeFactory/getScheme()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationTupleScheme/BinaryAnnotationTupleScheme()
com/github/kristofa/brave/AutoValue_KeyValueAnnotation/equals(java.lang.Object)#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/AutoValue_KeyValueAnnotation/equals(java.lang.Object)#java/lang/String/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_KeyValueAnnotation/equals(java.lang.Object)#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/AutoValue_KeyValueAnnotation/hashCode()#java/lang/String/hashCode()
com/twitter/zipkin/gen/Annotation/AnnotationTupleSchemeFactory/getScheme()#com/twitter/zipkin/gen/Annotation/AnnotationTupleScheme/AnnotationTupleScheme()
com/github/kristofa/brave/jersey2/JerseyTestSpringConfig/brave()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/jersey2/JerseyTestSpringConfig/brave()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/jersey2/JerseyTestSpringConfig/brave()#com/github/kristofa/brave/jersey2/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/jersey2/JerseyTestSpringConfig/brave()#com/github/kristofa/brave/Brave/Builder/Builder(java.lang.String)
com/github/kristofa/brave/jersey2/JerseyTestSpringConfig/serviceNameProvider()#com/github/kristofa/brave/http/StringServiceNameProvider/StringServiceNameProvider(java.lang.String)
com/github/kristofa/brave/jersey2/JerseyTestSpringConfig/spanNameProvider()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/twitter/zipkin/gen/Endpoint/EndpointTupleSchemeFactory/getScheme()#com/twitter/zipkin/gen/Endpoint/EndpointTupleScheme/EndpointTupleScheme()
com/github/kristofa/brave/spring/ServletHandlerInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#com/github/kristofa/brave/http/HttpServerRequestAdapter/HttpServerRequestAdapter(com.github.kristofa.brave.http.HttpServerRequest,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/spring/ServletHandlerInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/spring/ServletHandlerInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#com/github/kristofa/brave/spring/ServletHandlerInterceptor/preHandle(javax/servlet/http/HttpServletRequest,javax/servlet/http/HttpServletResponse,java/lang/Object)/$anonymous1/()
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterConcurrentHandlingStarted(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterConcurrentHandlingStarted(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterConcurrentHandlingStarted(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#javax/servlet/ServletRequest/setAttribute(java.lang.String,java.lang.Object)
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)#com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax/servlet/http/HttpServletRequest,javax/servlet/http/HttpServletResponse,java/lang/Object,java/lang/Exception)/$anonymous1/()
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)#com/github/kristofa/brave/http/HttpServerResponseAdapter/HttpServerResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/spring/ServletHandlerInterceptor/afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)#javax/servlet/ServletRequest/getAttribute(java.lang.String)
com/twitter/zipkin/gen/Span/SpanTupleSchemeFactory/getScheme()#com/twitter/zipkin/gen/Span/SpanTupleScheme/SpanTupleScheme()
com/twitter/zipkin/gen/LogEntry/LogEntryTupleSchemeFactory/getScheme()#com/twitter/zipkin/gen/LogEntry/LogEntryTupleScheme/LogEntryTupleScheme()
com/github/kristofa/brave/BraveRunnableTest/setup()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveRunnableTest/setup()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/BraveRunnableTest/setup()#com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveRunnableTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveRunnableTest/setup()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/BraveRunnableTest/testRun()#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveRunnableTest/testRun()#java/lang/Runnable/run()
com/github/kristofa/brave/BraveRunnableTest/testRun()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/BraveRunnableTest/testRun()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/BraveRunnableTest/testRun()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/BraveRunnableTest/testRun()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/BraveRunnableTest/testRun()#com/github/kristofa/brave/BraveRunnable/run()
com/github/kristofa/brave/FixedSampleRateTraceFilter/trace(long,java.lang.String)#java/util/concurrent/atomic/AtomicInteger/set(int)
com/github/kristofa/brave/FixedSampleRateTraceFilter/trace(long,java.lang.String)#java/util/concurrent/atomic/AtomicInteger/incrementAndGet()
com/github/kristofa/brave/FixedSampleRateTraceFilter/trace(long,java.lang.String)#java/util/concurrent/atomic/AtomicInteger/get()
com/github/kristofa/brave/TraceData/builder()#com/github/kristofa/brave/AutoValue_TraceData/Builder/Builder()
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#com/github/kristofa/brave/http/HttpClientResponseAdapter/HttpClientResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#com/github/kristofa/brave/http/HttpClientRequestAdapter/HttpClientRequestAdapter(com.github.kristofa.brave.http.HttpClientRequest,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#org/jboss/resteasy/spi/interception/ClientExecutionContext/proceed()
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#com/github/kristofa/brave/NoAnnotationsClientResponseAdapter/getInstance()
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#org/jboss/resteasy/spi/interception/ClientExecutionContext/getRequest()
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#com/github/kristofa/brave/resteasy/RestEasyHttpClientResponse/RestEasyHttpClientResponse(org.jboss.resteasy.client.ClientResponse)
com/github/kristofa/brave/resteasy/BraveClientExecutionInterceptor/execute(org.jboss.resteasy.spi.interception.ClientExecutionContext)#com/github/kristofa/brave/resteasy/RestEasyHttpClientRequest/RestEasyHttpClientRequest(org.jboss.resteasy.client.ClientRequest)
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleFalse()#org/junit/Assert/assertFalse(boolean)
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleFalse()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleFalse()#com/github/kristofa/brave/ServerSpan/getSample()
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleFalse()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleFalse()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ServerSpanTest/testHashCode()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerSpanTest/testHashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/ServerSpanTest/testHashCode()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ServerSpanTest/setup()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerSpanTest/testEqualsObject()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/ServerSpanTest/testEqualsObject()#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/ServerSpanTest/testEqualsObject()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleNull()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleNull()#com/github/kristofa/brave/ServerSpan/getSample()
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleNull()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerSpanTest/testServerSpanSampleNull()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ServerSpanTest/testGetSample()#com/github/kristofa/brave/ServerSpan/getSample()
com/github/kristofa/brave/ServerSpanTest/testGetSample()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#com/twitter/zipkin/gen/Span/getParent_id()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#com/twitter/zipkin/gen/Span/getBinary_annotations()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#java/lang/Long/longValue()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ServerSpanTest/testGetSpan()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/sampler/ZooKeeperSampler/InitialConnectionStateListener/stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)#java/lang/Enum/equals(java.lang.Object)
com/github/kristofa/brave/sampler/ZooKeeperSampler/InitialConnectionStateListener/stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)#java/util/concurrent/CountDownLatch/countDown()
com/github/kristofa/brave/sampler/ZooKeeperSampler/InitialConnectionStateListener/stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)#java/util/logging/Logger/info(java.lang.String)
com/twitter/zipkin/gen/scribe/Processor/Log/getResult(I,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Log_result/Log_result()
com/twitter/zipkin/gen/scribe/Processor/Log/getResult(I,com.twitter.zipkin.gen.scribe.Log_args)#com/twitter/zipkin/gen/scribe/Iface/Log(java.util.List)
com/twitter/zipkin/gen/scribe/Processor/Log/getEmptyArgsInstance()#com/twitter/zipkin/gen/scribe/Log_args/Log_args()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBeanTest/closeShouldCleanUpStatementInterceptor()#org/junit/Assert/assertNull(java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBeanTest/closeShouldCleanUpStatementInterceptor()#com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBean/MySQLStatementInterceptorManagementBean(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBeanTest/closeShouldCleanUpStatementInterceptor()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientTracer(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBeanTest/closeShouldCleanUpStatementInterceptor()#com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBean/close()
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBeanTest/afterPropertiesSetShouldSetTracerOnStatementInterceptor()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBeanTest/afterPropertiesSetShouldSetTracerOnStatementInterceptor()#com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBean/MySQLStatementInterceptorManagementBean(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/mysql/MySQLStatementInterceptorManagementBeanTest/clearStatementInterceptor()#com/github/kristofa/brave/mysql/MySQLStatementInterceptor/setClientTracer(com.github.kristofa.brave.ClientTracer)
com/github/kristofa/brave/spring/BraveConfig/pingController()#com/github/kristofa/brave/spring/PingController/PingController()
com/github/kristofa/brave/spring/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/spring/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/Builder(java.lang.String)
com/github/kristofa/brave/spring/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/spring/BraveConfig/brave()#com/github/kristofa/brave/spring/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/spring/BraveConfig/addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)#org/springframework/web/servlet/config/annotation/InterceptorRegistry/addInterceptor(org.springframework.web.servlet.HandlerInterceptor)
com/github/kristofa/brave/spring/BraveConfig/addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/spring/BraveConfig/addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)#com/github/kristofa/brave/spring/ServletHandlerInterceptor/ServletHandlerInterceptor(com.github.kristofa.brave.ServerRequestInterceptor,com.github.kristofa.brave.ServerResponseInterceptor,com.github.kristofa.brave.http.SpanNameProvider,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/spring/PingController/async()#com/github/kristofa/brave/spring/PingController/async()/$anonymous1/()
com/github/kristofa/brave/spring/PingController/sync()#org/springframework/http/ResponseEntity/noContent()
com/github/kristofa/brave/spring/PingController/sync()#org/springframework/http/ResponseEntity/HeadersBuilder/build()
com/github/kristofa/brave/http/DefaultSpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)#com/github/kristofa/brave/http/HttpRequest/getHttpMethod()
com/github/kristofa/brave/httpclient/HttpClientRequestImpl/getHttpMethod()#org/apache/http/HttpRequest/getRequestLine()
com/github/kristofa/brave/httpclient/HttpClientRequestImpl/getHttpMethod()#org/apache/http/RequestLine/getMethod()
com/github/kristofa/brave/httpclient/HttpClientRequestImpl/addHeader(java.lang.String,java.lang.String)#org/apache/http/HttpMessage/addHeader(java.lang.String,java.lang.String)
com/github/kristofa/brave/httpclient/HttpClientRequestImpl/getUri()#java/net/URI/URI(java.lang.String)
com/github/kristofa/brave/httpclient/HttpClientRequestImpl/getUri()#org/apache/http/RequestLine/getUri()
com/github/kristofa/brave/httpclient/HttpClientRequestImpl/getUri()#org/apache/http/HttpRequest/getRequestLine()
com/github/kristofa/brave/httpclient/HttpClientRequestImpl/getUri()#java/lang/IllegalStateException/IllegalStateException(java.lang.Throwable)
com/github/kristofa/brave/resteasy3/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/resteasy3/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/Builder(java.lang.String)
com/github/kristofa/brave/resteasy3/BraveConfig/brave()#com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/getInstance()
com/github/kristofa/brave/resteasy3/BraveConfig/brave()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/httpclient/HttpClientResponseImpl/getHttpStatusCode()#org/apache/http/HttpResponse/getStatusLine()
com/github/kristofa/brave/httpclient/HttpClientResponseImpl/getHttpStatusCode()#org/apache/http/StatusLine/getStatusCode()
com/twitter/zipkin/gen/scribe/AsyncClient/Log(java.util.List,org.apache.thrift.async.AsyncMethodCallback)#org/apache/thrift/async/TAsyncClient/checkReady()
com/twitter/zipkin/gen/scribe/AsyncClient/Log(java.util.List,org.apache.thrift.async.AsyncMethodCallback)#org/apache/thrift/async/TAsyncClientManager/call(org.apache.thrift.async.TAsyncMethodCall)
com/twitter/zipkin/gen/scribe/AsyncClient/Log(java.util.List,org.apache.thrift.async.AsyncMethodCallback)#com/twitter/zipkin/gen/scribe/AsyncClient/Log_call/Log_call(java.util.List,org.apache.thrift.async.AsyncMethodCallback,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport)
com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/ClientTracer/setClientSent()
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/ClientRequestAdapter/getClientServiceName()
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/ClientTracer/setCurrentClientServiceName(java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/ClientRequestAdapter/addSpanIdToRequest(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/ClientRequestAdapter/requestAnnotations()
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/ClientTracer/startNewSpan(java.lang.String)
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)#com/github/kristofa/brave/ClientRequestAdapter/getSpanName()
com/github/kristofa/brave/KeyValueAnnotation/create(java.lang.String,java.lang.String)#com/github/kristofa/brave/AutoValue_KeyValueAnnotation/AutoValue_KeyValueAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/AutoValue_ClientTracer/Builder/build()#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
com/github/kristofa/brave/AutoValue_ClientTracer/Builder/build()#java/lang/String/isEmpty()
com/github/kristofa/brave/AutoValue_ClientTracer/Builder/build()#com/github/kristofa/brave/AutoValue_ClientTracer/AutoValue_ClientTracer(com.github.kristofa.brave.SpanAndEndpoint.ClientSpanAndEndpoint,java.util.Random,com.github.kristofa.brave.SpanCollector,com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/Sampler/ZipkinSampler/isSampled(long)#zipkin/Sampler/isSampled(long)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#java/util/List/get(int)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/github/kristofa/brave/ServerTracer/setServerSend()
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/github/kristofa/brave/ServerSpanState/getServerEndpoint()
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ServerTracerTest/testSetServerSend()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ServerTracerTest/testSetServerSendShouldNoServerSpan()#com/github/kristofa/brave/ServerTracer/setServerSend()
com/github/kristofa/brave/ServerTracerTest/testSetServerSendShouldNoServerSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerSendShouldNoServerSpan()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerSendShouldNoServerSpan()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerSendShouldNoServerSpan()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerSendShouldNoServerSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetServerSendShouldNoServerSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedNoServerSpan()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedNoServerSpan()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedNoServerSpan()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedNoServerSpan()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedNoServerSpan()#com/github/kristofa/brave/ServerTracer/setServerReceived()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedNoServerSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedNoServerSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerTracerTest/testClearCurrentSpan()#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerTracerTest/testClearCurrentSpan()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracerTest/testClearCurrentSpan()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testClearCurrentSpan()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/github/kristofa/brave/ServerSpanState/getServerEndpoint()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#java/util/List/get(int)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/github/kristofa/brave/ServerTracer/setServerReceived()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceived()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ServerTracerTest/setup()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/setup()#com/github/kristofa/brave/ServerTracer/Builder/state(com.github.kristofa.brave.ServerSpanState)
com/github/kristofa/brave/ServerTracerTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ServerTracerTest/setup()#com/github/kristofa/brave/ServerTracer/Builder/randomGenerator(java.util.Random)
com/github/kristofa/brave/ServerTracerTest/setup()#com/github/kristofa/brave/ServerTracer/Builder/build()
com/github/kristofa/brave/ServerTracerTest/setup()#com/github/kristofa/brave/ServerTracer/builder()
com/github/kristofa/brave/ServerTracerTest/setup()#org/powermock/api/mockito/PowerMockito/mockStatic(java.lang.Class,java.lang.Class<?>[])
com/github/kristofa/brave/ServerTracerTest/setup()#java/lang/System/currentTimeMillis()
com/github/kristofa/brave/ServerTracerTest/setup()#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/github/kristofa/brave/ServerTracerTest/setup()#com/github/kristofa/brave/ServerTracer/Builder/traceSampler(com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/ServerTracerTest/setup()#org/powermock/api/mockito/PowerMockito/when(T)
com/github/kristofa/brave/ServerTracerTest/setup()#com/github/kristofa/brave/ServerTracer/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/ServerTracerTest/testSetStateNoTracing()#com/github/kristofa/brave/ServerTracer/setStateNoTracing()
com/github/kristofa/brave/ServerTracerTest/testSetStateNoTracing()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ServerTracerTest/testSetStateNoTracing()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracerTest/testSetStateNoTracing()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetStateNoTracing()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#com/github/kristofa/brave/ServerSpan/create(java.lang.Boolean)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#java/util/Random/nextLong()
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerFalse()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#com/github/kristofa/brave/ServerSpanState/getServerEndpoint()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#com/twitter/zipkin/gen/BinaryAnnotation/getHost()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#java/util/List/get(int)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#com/twitter/zipkin/gen/Endpoint/getService_name()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress_noServiceName()#com/github/kristofa/brave/ServerTracer/setServerReceived(int,int,java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Annotation/setHost(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/mockito/Mockito/verify(T,org.mockito.verification.VerificationMode)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/github/kristofa/brave/ServerSpanState/getServerEndpoint()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Annotation/setValue(java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Endpoint/setPort(short)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#java/util/List/get(int)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Endpoint/setIpv4(int)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Annotation/setTimestamp(long)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Endpoint/setService_name(java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setValue(byte[])
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/mockito/Mockito/times(int)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/Annotation/Annotation()
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/github/kristofa/brave/ServerTracer/setServerReceived(int,int,java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_type(com.twitter.zipkin.gen.AnnotationType)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#com/twitter/zipkin/gen/BinaryAnnotation/setKey(java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ServerTracerTest/testSetServerReceivedSentClientAddress()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#java/util/Random/nextLong()
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#com/github/kristofa/brave/ServerTracer/setStateUnknown(java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetStateUnknownSamplerTrue()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetStateCurrentTrace()#com/github/kristofa/brave/ServerSpan/create(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetStateCurrentTrace()#com/github/kristofa/brave/ServerTracer/setStateCurrentTrace(long,long,java.lang.Long,java.lang.String)
com/github/kristofa/brave/ServerTracerTest/testSetStateCurrentTrace()#com/github/kristofa/brave/ServerSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/ServerTracerTest/testSetStateCurrentTrace()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerTracerTest/testSetStateCurrentTrace()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpServerRequestAdapter/requestAnnotations()#java/util/Collections/emptyList()
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#com/github/kristofa/brave/TraceData/Builder/sample(java.lang.Boolean)
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#java/lang/String/toLowerCase()
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#com/github/kristofa/brave/TraceData/Builder/spanId(com.github.kristofa.brave.SpanId)
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#java/lang/String/equals(java.lang.Object)
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#com/github/kristofa/brave/http/HttpServerRequest/getHttpHeaderValue(java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#com/github/kristofa/brave/http/BraveHttpHeaders/getName()
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#com/github/kristofa/brave/http/HttpServerRequestAdapter/getSpanId(java.lang.String,java.lang.String,java.lang.String)
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#com/github/kristofa/brave/TraceData/Builder/build()
com/github/kristofa/brave/http/HttpServerRequestAdapter/getTraceData()#com/github/kristofa/brave/TraceData/builder()
com/github/kristofa/brave/http/HttpServerRequestAdapter/getSpanName()#com/github/kristofa/brave/http/SpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/http/HttpServerRequestAdapter/getSpanId(java.lang.String,java.lang.String,java.lang.String)#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/http/HttpServerRequestAdapter/getSpanId(java.lang.String,java.lang.String,java.lang.String)#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/resteasy3/BraveRestEasyResourceImpl/a()#javax/ws/rs/core/Response/ResponseBuilder/build()
com/github/kristofa/brave/resteasy3/BraveRestEasyResourceImpl/a()#java/lang/Thread/sleep(long)
com/github/kristofa/brave/resteasy3/BraveRestEasyResourceImpl/a()#javax/ws/rs/core/Response/status(int)
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/setup()#com/github/kristofa/brave/http/DefaultSpanNameProvider/DefaultSpanNameProvider()
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/getHttpMethod()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/getHttpMethod()#com/github/kristofa/brave/http/HttpRequest/getHttpMethod()
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/getHttpMethod()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/getHttpMethod()#com/github/kristofa/brave/http/DefaultSpanNameProvider/spanName(com.github.kristofa.brave.http.HttpRequest)
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/getHttpMethod()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/getHttpMethod()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/DefaulSpanNameProviderTest/getHttpMethod()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/BraveTest/testGetClientTracer()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveTest/testGetClientTracer()#org/junit/Assert/assertTrue(java.lang.String,boolean)
com/github/kristofa/brave/BraveTest/testGetClientTracer()#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/BraveTest/testGetClientTracer()#com/github/kristofa/brave/Brave/clientTracer()
com/github/kristofa/brave/BraveTest/testGetClientTracer()#com/github/kristofa/brave/ClientTracer/traceSampler()
com/github/kristofa/brave/BraveTest/testGetClientTracer()#com/github/kristofa/brave/ClientTracer/spanCollector()
com/github/kristofa/brave/BraveTest/testGetClientTracer()#com/github/kristofa/brave/ClientTracer/spanAndEndpoint()
com/github/kristofa/brave/BraveTest/testGetClientTracer()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveTest/setup()#com/github/kristofa/brave/Brave/Builder/Builder(int,int,java.lang.String)
com/github/kristofa/brave/BraveTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/BraveTest/setup()#com/github/kristofa/brave/Brave/Builder/build()
com/github/kristofa/brave/BraveTest/setup()#com/github/kristofa/brave/Brave/Builder/spanCollector(com.github.kristofa.brave.SpanCollector)
com/github/kristofa/brave/BraveTest/setup()#com/github/kristofa/brave/Brave/Builder/traceSampler(com.github.kristofa.brave.Sampler)
com/github/kristofa/brave/BraveTest/testGetServerSpanThreadBinder()#com/github/kristofa/brave/Brave/serverSpanThreadBinder()
com/github/kristofa/brave/BraveTest/testGetServerSpanThreadBinder()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveTest/testGetServerSpanAnnotationSubmitter()#com/github/kristofa/brave/Brave/serverSpanAnnotationSubmitter()
com/github/kristofa/brave/BraveTest/testGetServerSpanAnnotationSubmitter()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveTest/testGetServerTracer()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveTest/testGetServerTracer()#com/github/kristofa/brave/ServerTracer/traceSampler()
com/github/kristofa/brave/BraveTest/testGetServerTracer()#com/github/kristofa/brave/Brave/serverTracer()
com/github/kristofa/brave/BraveTest/testGetServerTracer()#org/junit/Assert/assertSame(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveTest/testGetServerTracer()#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/BraveTest/testGetServerTracer()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/BraveTest/testGetServerTracer()#com/github/kristofa/brave/ServerTracer/spanCollector()
com/github/kristofa/brave/BraveTest/testGetServerTracer()#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/BraveTest/testStateBetweenServerAndClient()#org/junit/Assert/assertSame(java.lang.String,java.lang.Object,java.lang.Object)
com/github/kristofa/brave/BraveTest/testStateBetweenServerAndClient()#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/state()
com/github/kristofa/brave/BraveTest/testStateBetweenServerAndClient()#com/github/kristofa/brave/Brave/serverTracer()
com/github/kristofa/brave/BraveTest/testStateBetweenServerAndClient()#com/github/kristofa/brave/ServerTracer/spanAndEndpoint()
com/github/kristofa/brave/BraveTest/testStateBetweenServerAndClient()#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/BraveTest/testStateBetweenServerAndClient()#com/github/kristofa/brave/Brave/clientTracer()
com/github/kristofa/brave/BraveTest/testStateBetweenServerAndClient()#com/github/kristofa/brave/ClientTracer/spanAndEndpoint()
com/github/kristofa/brave/AutoValue_TraceData/hashCode()#java/lang/Boolean/hashCode()
com/github/kristofa/brave/AutoValue_TraceData/hashCode()#java/lang/Object/hashCode()
com/github/kristofa/brave/AutoValue_TraceData/equals(java.lang.Object)#java/lang/Boolean/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_TraceData/equals(java.lang.Object)#com/github/kristofa/brave/TraceData/getSample()
com/github/kristofa/brave/AutoValue_TraceData/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_TraceData/equals(java.lang.Object)#com/github/kristofa/brave/TraceData/getSpanId()
com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/endpoint()#com/github/kristofa/brave/ServerSpanState/getServerEndpoint()
com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/endpoint()#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/create(com.github.kristofa.brave.ServerSpanState)#com/github/kristofa/brave/AutoValue_SpanAndEndpoint_ServerSpanAndEndpoint/AutoValue_SpanAndEndpoint_ServerSpanAndEndpoint(com.github.kristofa.brave.ServerSpanState)
com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/span()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/span()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/span()#com/github/kristofa/brave/SpanAndEndpoint/ServerSpanAndEndpoint/state()
com/github/kristofa/brave/AutoValue_SpanId/equals(java.lang.Object)#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/AutoValue_SpanId/equals(java.lang.Object)#java/lang/Long/equals(java.lang.Object)
com/github/kristofa/brave/AutoValue_SpanId/equals(java.lang.Object)#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/AutoValue_SpanId/equals(java.lang.Object)#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/AutoValue_SpanId/hashCode()#java/lang/Long/hashCode()
com/twitter/zipkin/gen/scribe/Client/Log(java.util.List)#com/twitter/zipkin/gen/scribe/Client/recv_Log()
com/twitter/zipkin/gen/scribe/Client/Log(java.util.List)#com/twitter/zipkin/gen/scribe/Client/send_Log(java.util.List)
com/twitter/zipkin/gen/scribe/Client/recv_Log()#org/apache/thrift/TServiceClient/receiveBase(org.apache.thrift.TBase,java.lang.String)
com/twitter/zipkin/gen/scribe/Client/recv_Log()#com/twitter/zipkin/gen/scribe/Log_result/Log_result()
com/twitter/zipkin/gen/scribe/Client/recv_Log()#com/twitter/zipkin/gen/scribe/Log_result/isSetSuccess()
com/twitter/zipkin/gen/scribe/Client/recv_Log()#org/apache/thrift/TApplicationException/TApplicationException(int,java.lang.String)
com/twitter/zipkin/gen/scribe/Client/send_Log(java.util.List)#com/twitter/zipkin/gen/scribe/Log_args/Log_args()
com/twitter/zipkin/gen/scribe/Client/send_Log(java.util.List)#com/twitter/zipkin/gen/scribe/Log_args/setMessages(java.util.List)
com/twitter/zipkin/gen/scribe/Client/send_Log(java.util.List)#org/apache/thrift/TServiceClient/sendBase(java.lang.String,org.apache.thrift.TBase)
com/github/kristofa/brave/scribe/ScribeServer/getReceivedSpans()#com/github/kristofa/brave/scribe/ScribeReceiver/getSpans()
com/github/kristofa/brave/scribe/ScribeServer/clearDelay()#com/github/kristofa/brave/scribe/ScribeReceiver/setDelayMs(int)
com/github/kristofa/brave/scribe/ScribeServer/introduceDelay(int,java.util.concurrent.TimeUnit)#com/github/kristofa/brave/scribe/ScribeReceiver/setDelayMs(int)
com/github/kristofa/brave/scribe/ScribeServer/introduceDelay(int,java.util.concurrent.TimeUnit)#java/util/concurrent/TimeUnit/convert(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/scribe/ScribeServer/start()#com/github/kristofa/brave/scribe/ScribeServer/start()/$anonymous1/()
com/github/kristofa/brave/scribe/ScribeServer/start()#java/lang/Thread/start()
com/github/kristofa/brave/scribe/ScribeServer/start()#java/lang/Thread/Thread(java.lang.Runnable)
com/github/kristofa/brave/scribe/ScribeServer/clearReceivedSpans()#com/github/kristofa/brave/scribe/ScribeReceiver/clearReceivedSpans()
com/github/kristofa/brave/scribe/ScribeServer/stop()#org/apache/thrift/server/TServer/stop()
com/github/kristofa/brave/BraveExecutorService/isShutdown()#java/util/concurrent/ExecutorService/isShutdown()
com/github/kristofa/brave/BraveExecutorService/submit(java.lang.Runnable)#java/util/concurrent/ExecutorService/submit(java.lang.Runnable)
com/github/kristofa/brave/BraveExecutorService/submit(java.lang.Runnable)#com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorService/invokeAny(java.util.Collection)#com/github/kristofa/brave/BraveExecutorService/buildBraveCollection(java.util.Collection)
com/github/kristofa/brave/BraveExecutorService/invokeAny(java.util.Collection)#java/util/concurrent/ExecutorService/invokeAny(java.util.Collection)
com/github/kristofa/brave/BraveExecutorService/isTerminated()#java/util/concurrent/ExecutorService/isTerminated()
com/github/kristofa/brave/BraveExecutorService/close()#com/github/kristofa/brave/BraveExecutorService/shutdown()
com/github/kristofa/brave/BraveExecutorService/buildBraveCollection(java.util.Collection)#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/BraveExecutorService/buildBraveCollection(java.util.Collection)#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorService/buildBraveCollection(java.util.Collection)#java/util/Collection/add(E)
com/github/kristofa/brave/BraveExecutorService/shutdown()#java/util/concurrent/ExecutorService/shutdown()
com/github/kristofa/brave/BraveExecutorService/invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)#com/github/kristofa/brave/BraveExecutorService/buildBraveCollection(java.util.Collection)
com/github/kristofa/brave/BraveExecutorService/invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)#java/util/concurrent/ExecutorService/invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorService/shutdownNow()#java/util/concurrent/ExecutorService/shutdownNow()
com/github/kristofa/brave/BraveExecutorService/awaitTermination(long,java.util.concurrent.TimeUnit)#java/util/concurrent/ExecutorService/awaitTermination(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorService/execute(java.lang.Runnable)#com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorService/execute(java.lang.Runnable)#java/util/concurrent/Executor/execute(java.lang.Runnable)
com/github/kristofa/brave/BraveExecutorService/submit(java.util.concurrent.Callable)#com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorService/submit(java.util.concurrent.Callable)#java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)
com/github/kristofa/brave/BraveExecutorService/submit(java.lang.Runnable,T)#java/util/concurrent/ExecutorService/submit(java.lang.Runnable,T)
com/github/kristofa/brave/BraveExecutorService/submit(java.lang.Runnable,T)#com/github/kristofa/brave/BraveRunnable/create(java.lang.Runnable,com.github.kristofa.brave.ServerSpanThreadBinder)
com/github/kristofa/brave/BraveExecutorService/invokeAll(java.util.Collection)#java/util/concurrent/ExecutorService/invokeAll(java.util.Collection)
com/github/kristofa/brave/BraveExecutorService/invokeAll(java.util.Collection)#com/github/kristofa/brave/BraveExecutorService/buildBraveCollection(java.util.Collection)
com/github/kristofa/brave/BraveExecutorService/invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)#java/util/concurrent/ExecutorService/invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/BraveExecutorService/invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)#com/github/kristofa/brave/BraveExecutorService/buildBraveCollection(java.util.Collection)
com/github/kristofa/brave/resteasy/BravePreProcessInterceptor/preProcess(org.jboss.resteasy.spi.HttpRequest,org.jboss.resteasy.core.ResourceMethod)#com/github/kristofa/brave/resteasy/RestEasyHttpServerRequest/RestEasyHttpServerRequest(org.jboss.resteasy.spi.HttpRequest)
com/github/kristofa/brave/resteasy/BravePreProcessInterceptor/preProcess(org.jboss.resteasy.spi.HttpRequest,org.jboss.resteasy.core.ResourceMethod)#com/github/kristofa/brave/http/HttpServerRequestAdapter/HttpServerRequestAdapter(com.github.kristofa.brave.http.HttpServerRequest,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/resteasy/BravePreProcessInterceptor/preProcess(org.jboss.resteasy.spi.HttpRequest,org.jboss.resteasy.core.ResourceMethod)#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/httpclient/BraveHttpRequestInterceptor/process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)#com/github/kristofa/brave/http/HttpClientRequestAdapter/HttpClientRequestAdapter(com.github.kristofa.brave.http.HttpClientRequest,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/httpclient/BraveHttpRequestInterceptor/process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)#com/github/kristofa/brave/httpclient/HttpClientRequestImpl/HttpClientRequestImpl(org.apache.http.HttpRequest)
com/github/kristofa/brave/httpclient/BraveHttpRequestInterceptor/process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setValueIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/AnnotationType/findByValue(int)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setHostIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/readStructEnd()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setKeyIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/readI32()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocolUtil/skip(org.apache.thrift.protocol.TProtocol,byte)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/validate()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/setAnnotation_typeIsSet(boolean)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/readString()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/readStructBegin()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/readFieldEnd()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/readBinary()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/readFieldBegin()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeFieldEnd()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/AnnotationType/getValue()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/isSetHost()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeFieldStop()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeStructBegin(org.apache.thrift.protocol.TStruct)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#com/twitter/zipkin/gen/BinaryAnnotation/validate()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeFieldBegin(org.apache.thrift.protocol.TField)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeStructEnd()
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeBinary(java.nio.ByteBuffer)
com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.BinaryAnnotation)#org/apache/thrift/protocol/TProtocol/writeI32(int)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/setPortIsSet(boolean)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/readFieldEnd()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/setIpv4IsSet(boolean)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/readStructEnd()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/readI32()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocolUtil/skip(org.apache.thrift.protocol.TProtocol,byte)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/validate()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/readI16()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/readFieldBegin()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/readString()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/readStructBegin()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/setService_nameIsSet(boolean)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeFieldEnd()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeI16(short)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeFieldStop()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#com/twitter/zipkin/gen/Endpoint/validate()
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeI32(int)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeStructBegin(org.apache.thrift.protocol.TStruct)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeFieldBegin(org.apache.thrift.protocol.TField)
com/twitter/zipkin/gen/Endpoint/EndpointStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Endpoint)#org/apache/thrift/protocol/TProtocol/writeStructEnd()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Endpoint/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/setValueIsSet(boolean)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/setHostIsSet(boolean)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/readFieldEnd()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/readStructEnd()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/readI64()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocolUtil/skip(org.apache.thrift.protocol.TProtocol,byte)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/readString()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/readStructBegin()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Endpoint/Endpoint()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/validate()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/readFieldBegin()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/writeFieldEnd()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Endpoint/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/writeI64(long)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/isSetHost()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/writeFieldStop()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/writeStructBegin(org.apache.thrift.protocol.TStruct)
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/writeStructEnd()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#com/twitter/zipkin/gen/Annotation/validate()
com/twitter/zipkin/gen/Annotation/AnnotationStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Annotation)#org/apache/thrift/protocol/TProtocol/writeFieldBegin(org.apache.thrift.protocol.TField)
com/github/kristofa/brave/sampler/ZooKeeperSampler/getData(java.lang.String)#org/apache/curator/framework/api/Pathable/forPath(java.lang.String)
com/github/kristofa/brave/sampler/ZooKeeperSampler/getData(java.lang.String)#org/apache/curator/framework/api/Watchable/usingWatcher(org.apache.zookeeper.Watcher)
com/github/kristofa/brave/sampler/ZooKeeperSampler/getData(java.lang.String)#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/sampler/ZooKeeperSampler/getData(java.lang.String)#org/apache/curator/framework/CuratorFramework/getData()
com/github/kristofa/brave/sampler/ZooKeeperSampler/getData(java.lang.String)#org/apache/curator/framework/CuratorFramework/checkExists()
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#com/github/kristofa/brave/sampler/ZooKeeperSampler/getSampleRate()
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#java/lang/String/equals(java.lang.Object)
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#java/lang/Enum/equals(java.lang.Object)
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#org/apache/zookeeper/WatchedEvent/getType()
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#org/apache/zookeeper/WatchedEvent/getPath()
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#java/lang/String/format(java.lang.String,java.lang.Object[])
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#com/github/kristofa/brave/Sampler/create(float)
com/github/kristofa/brave/sampler/ZooKeeperSampler/process(org.apache.zookeeper.WatchedEvent)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/sampler/ZooKeeperSampler/isSampled(long)#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/sampler/ZooKeeperSampler/getSampleRate()#com/github/kristofa/brave/sampler/ZooKeeperSampler/getData(java.lang.String)
com/github/kristofa/brave/sampler/ZooKeeperSampler/getSampleRate()#java/lang/String/String(byte[])
com/github/kristofa/brave/sampler/ZooKeeperSampler/getSampleRate()#java/lang/Float/valueOf(java.lang.String)
com/github/kristofa/brave/sampler/ZooKeeperSampler/close()#org/apache/curator/framework/CuratorFramework/close()
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/github/kristofa/brave/http/HttpClientResponseAdapter/HttpClientResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/github/kristofa/brave/http/HttpClientRequestAdapter/HttpClientRequestAdapter(com.github.kristofa.brave.http.HttpClientRequest,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/github/kristofa/brave/jersey/JerseyHttpRequest/JerseyHttpRequest(com.sun.jersey.api.client.ClientRequest)
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/github/kristofa/brave/jersey/JerseyHttpResponse/JerseyHttpResponse(com.sun.jersey.api.client.ClientResponse)
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/sun/jersey/api/client/ClientHandler/handle(com.sun.jersey.api.client.ClientRequest)
com/github/kristofa/brave/jersey/JerseyClientTraceFilter/handle(com.sun.jersey.api.client.ClientRequest)#com/sun/jersey/api/client/filter/ClientFilter/getNext()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/validate()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/ArrayList/ArrayList(int)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setBinary_annotationsIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/BinaryAnnotation/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Annotation/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readListEnd()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setParent_idIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setNameIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setDebugIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readFieldEnd()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readStructEnd()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readI64()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setDurationIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setTrace_idIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocolUtil/skip(org.apache.thrift.protocol.TProtocol,byte)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readListBegin()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readBool()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setIdIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/setAnnotationsIsSet(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readString()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readStructBegin()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Annotation/Annotation()
com/twitter/zipkin/gen/Span/SpanStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/readFieldBegin()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDebug()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeListBegin(org.apache.thrift.protocol.TList)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetTimestamp()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#java/util/List/size()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeFieldStop()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeBool(boolean)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDuration()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeStructBegin(org.apache.thrift.protocol.TStruct)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/BinaryAnnotation/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeStructEnd()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeFieldEnd()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/validate()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeI64(long)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetParent_id()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeListEnd()
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TList/TList(byte,int)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#org/apache/thrift/protocol/TProtocol/writeFieldBegin(org.apache.thrift.protocol.TField)
com/twitter/zipkin/gen/Span/SpanStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Annotation/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/setCategoryIsSet(boolean)
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/readFieldEnd()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/readStructEnd()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocolUtil/skip(org.apache.thrift.protocol.TProtocol,byte)
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/validate()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/readString()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/readStructBegin()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/setMessageIsSet(boolean)
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/read(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/readFieldBegin()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/writeFieldEnd()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/writeString(java.lang.String)
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/writeFieldStop()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/writeStructBegin(org.apache.thrift.protocol.TStruct)
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/writeFieldBegin(org.apache.thrift.protocol.TField)
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#com/twitter/zipkin/gen/LogEntry/validate()
com/twitter/zipkin/gen/LogEntry/LogEntryStandardScheme/write(org.apache.thrift.protocol.TProtocol,com.twitter.zipkin.gen.LogEntry)#org/apache/thrift/protocol/TProtocol/writeStructEnd()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#com/github/kristofa/brave/ServerTracer/setServerSend()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#com/github/kristofa/brave/ServerResponseAdapter/responseAnnotations()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#com/github/kristofa/brave/AnnotationSubmitter/submitBinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleCustomAnnotations()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerResponseInterceptorTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/ServerResponseInterceptorTest/setup()#com/github/kristofa/brave/ServerResponseInterceptor/ServerResponseInterceptor(com.github.kristofa.brave.ServerTracer)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#com/github/kristofa/brave/ServerTracer/setServerSend()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#com/github/kristofa/brave/ServerTracer/clearCurrentSpan()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#org/mockito/InOrder/verify(T)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#org/mockito/Mockito/inOrder(java.lang.Object[])
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#com/github/kristofa/brave/ServerResponseAdapter/responseAnnotations()
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/ServerResponseInterceptorTest/testHandleNoCustomAnnotations()#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/IdConversionTest/testZeroId()#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/IdConversionTest/testZeroId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testZeroId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/IdConversionTest/testZeroId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/IdConversionTest/testIdEmpty()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testMaxValueId()#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/IdConversionTest/testMaxValueId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testMaxValueId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/IdConversionTest/testMaxValueId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/IdConversionTest/testIdTooLong()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testIdShouldntHavePrefix()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testIdShouldntBeUppercase()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testNegativeId()#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/IdConversionTest/testNegativeId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testNegativeId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/IdConversionTest/testNegativeId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/IdConversionTest/testPositiveId()#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/IdConversionTest/testPositiveId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testPositiveId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/IdConversionTest/testPositiveId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/IdConversionTest/testMinValueId()#com/github/kristofa/brave/IdConversion/convertToString(long)
com/github/kristofa/brave/IdConversionTest/testMinValueId()#com/github/kristofa/brave/IdConversion/convertToLong(java.lang.String)
com/github/kristofa/brave/IdConversionTest/testMinValueId()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/IdConversionTest/testMinValueId()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ClientTracer/Builder/state(com.github.kristofa.brave.ServerClientAndLocalSpanState)#com/github/kristofa/brave/SpanAndEndpoint/ClientSpanAndEndpoint/create(com.github.kristofa.brave.ServerClientAndLocalSpanState)
com/github/kristofa/brave/ClientTracer/Builder/state(com.github.kristofa.brave.ServerClientAndLocalSpanState)#com/github/kristofa/brave/ClientTracer/Builder/spanAndEndpoint(com.github.kristofa.brave.SpanAndEndpoint.ClientSpanAndEndpoint)
com/github/kristofa/brave/http/HttpSpanCollectorTest/TestMetricsHander/incrementAcceptedSpans(int)#java/util/concurrent/atomic/AtomicInteger/addAndGet(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/TestMetricsHander/incrementDroppedSpans(int)#java/util/concurrent/atomic/AtomicInteger/addAndGet(int)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#com/twitter/zipkin/gen/Span/getBinary_annotations()
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/AnnotationSubmitThread/AnnotationSubmitThread(int,int,com.github.kristofa.brave.AnnotationSubmitter)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#java/util/List/size()
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#java/util/Arrays/asList(T[])
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#com/github/kristofa/brave/SpanAndEndpoint/StaticSpanAndEndpoint/create(com.twitter.zipkin.gen.Span,com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#com/twitter/zipkin/gen/Span/getAnnotations()
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#java/util/List/add(E)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#com/github/kristofa/brave/AnnotationSubmitter/create(com.github.kristofa.brave.SpanAndEndpoint)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#java/util/concurrent/Future/get()
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/testSubmitAnnotations()#java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/setup()#java/util/concurrent/Executors/newFixedThreadPool(int)
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/setup()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/ITAnnotationSubmitterConcurrency/tearDown()#java/util/concurrent/ExecutorService/shutdown()
com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/endpoint()#com/github/kristofa/brave/ClientSpanState/getClientEndpoint()
com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/endpoint()#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/state()
com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/create(com.github.kristofa.brave.ServerClientAndLocalSpanState)#com/github/kristofa/brave/AutoValue_SpanAndEndpoint_LocalSpanAndEndpoint/AutoValue_SpanAndEndpoint_LocalSpanAndEndpoint(com.github.kristofa.brave.ServerClientAndLocalSpanState)
com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/span()#com/github/kristofa/brave/LocalSpanState/getCurrentLocalSpan()
com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/span()#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/state()
com/github/kristofa/brave/scribe/Base64/encode(byte[])#java/lang/AssertionError/AssertionError(java.lang.Object)
com/github/kristofa/brave/scribe/Base64/encode(byte[])#java/lang/String/String(byte[],int,int,java.lang.String)
com/github/kristofa/brave/internal/Util/checkNotNull(T,java.lang.String,java.lang.Object[])#java/lang/String/format(java.lang.String,java.lang.Object[])
com/github/kristofa/brave/internal/Util/checkNotNull(T,java.lang.String,java.lang.Object[])#java/lang/NullPointerException/NullPointerException(java.lang.String)
com/github/kristofa/brave/internal/Util/checkNotBlank(java.lang.String,java.lang.String,java.lang.Object[])#com/github/kristofa/brave/internal/Util/checkNotNull(T,java.lang.String,java.lang.Object[])
com/github/kristofa/brave/internal/Util/checkNotBlank(java.lang.String,java.lang.String,java.lang.Object[])#java/lang/String/trim()
com/github/kristofa/brave/internal/Util/checkNotBlank(java.lang.String,java.lang.String,java.lang.Object[])#java/lang/String/format(java.lang.String,java.lang.Object[])
com/github/kristofa/brave/internal/Util/checkNotBlank(java.lang.String,java.lang.String,java.lang.Object[])#java/lang/String/isEmpty()
com/github/kristofa/brave/internal/Util/checkNotBlank(java.lang.String,java.lang.String,java.lang.Object[])#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getCurrentClientSpan()#java/lang/ThreadLocal/get()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentClientSpan(com.twitter.zipkin.gen.Span)#java/lang/ThreadLocal/set(T)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)#java/lang/ThreadLocal/remove()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentServerSpan(com.github.kristofa.brave.ServerSpan)#java/lang/ThreadLocal/set(T)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/sample()#java/lang/ThreadLocal/get()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/sample()#com/github/kristofa/brave/ServerSpan/getSample()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentClientServiceName(java.lang.String)#java/lang/ThreadLocal/set(T)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)#java/lang/ThreadLocal/remove()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)#java/lang/ThreadLocal/set(T)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getCurrentLocalSpan()#java/lang/ThreadLocal/get()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getClientEndpoint()#com/twitter/zipkin/gen/Endpoint/setService_name(java.lang.String)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getClientEndpoint()#com/twitter/zipkin/gen/Endpoint/Endpoint(com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getClientEndpoint()#java/lang/ThreadLocal/get()
com/github/kristofa/brave/ThreadLocalServerClientAndLocalSpanState/getCurrentServerSpan()#java/lang/ThreadLocal/get()
com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/internal/Util/checkNotNull(T,java.lang.String,java.lang.Object[])
com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/LoggingSpanCollector/getLogger()
com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/Set/isEmpty()
com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/toString()
com/github/kristofa/brave/LoggingSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/isLoggable(java.util.logging.Level)
com/github/kristofa/brave/LoggingSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/LoggingSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)#java/util/Set/add(E)
com/github/kristofa/brave/SpanId/toString()#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/SpanId/toString()#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/SpanId/toString()#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)#com/github/kristofa/brave/AutoValue_SpanId/AutoValue_SpanId(long,long,java.lang.Long)
com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleSchemeFactory/getScheme()#com/twitter/zipkin/gen/scribe/Log_args/Log_argsTupleScheme/Log_argsTupleScheme()
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#java/util/ArrayList/ArrayList()
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#java/lang/Integer/valueOf(int)
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#java/util/concurrent/Executors/newFixedThreadPool(int)
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#com/github/kristofa/brave/ITBrave/SpanThread/SpanThread()
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#java/util/concurrent/ExecutorService/shutdown()
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#java/util/Collection/add(E)
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#java/util/concurrent/Future/get()
com/github/kristofa/brave/ITBrave/testServerClientAndLocalSpanCycle()#java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)
com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleSchemeFactory/getScheme()#com/twitter/zipkin/gen/scribe/Log_result/Log_resultTupleScheme/Log_resultTupleScheme()
com/github/kristofa/brave/jaxrs2/BraveClientResponseFilter/filter(javax.ws.rs.client.ClientRequestContext,javax.ws.rs.client.ClientResponseContext)#com/github/kristofa/brave/http/HttpClientResponseAdapter/HttpClientResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/jaxrs2/BraveClientResponseFilter/filter(javax.ws.rs.client.ClientRequestContext,javax.ws.rs.client.ClientResponseContext)#com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)
com/github/kristofa/brave/jaxrs2/BraveClientResponseFilter/filter(javax.ws.rs.client.ClientRequestContext,javax.ws.rs.client.ClientResponseContext)#com/github/kristofa/brave/jaxrs2/JaxRs2HttpResponse/JaxRs2HttpResponse(javax.ws.rs.client.ClientResponseContext)
com/github/kristofa/brave/kafka/KafkaSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/kafka/KafkaSpanCollector/collect(com.twitter.zipkin.gen.Span)#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementAcceptedSpans(int)
com/github/kristofa/brave/kafka/KafkaSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String)
com/github/kristofa/brave/kafka/KafkaSpanCollector/collect(com.twitter.zipkin.gen.Span)#java/util/concurrent/BlockingQueue/offer(E)
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#com/github/kristofa/brave/SpanCollectorMetricsHandler/incrementDroppedSpans(int)
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#java/util/concurrent/Future/get(long,java.util.concurrent.TimeUnit)
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#com/github/kristofa/brave/kafka/SpanProcessingTask/stop()
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#org/apache/kafka/clients/producer/Producer/close()
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#java/util/Collection/size()
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#java/util/logging/Logger/log(java.util.logging.Level,java.lang.String,java.lang.Throwable)
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/kafka/KafkaSpanCollector/close()#java/util/concurrent/ExecutorService/shutdown()
com/github/kristofa/brave/kafka/KafkaSpanCollector/defaultPropertiesWith(java.lang.String)#java/util/Properties/stringPropertyNames()
com/github/kristofa/brave/kafka/KafkaSpanCollector/defaultPropertiesWith(java.lang.String)#java/util/Properties/getProperty(java.lang.String)
com/github/kristofa/brave/kafka/KafkaSpanCollector/defaultPropertiesWith(java.lang.String)#java/util/Properties/setProperty(java.lang.String,java.lang.String)
com/github/kristofa/brave/kafka/KafkaSpanCollector/defaultPropertiesWith(java.lang.String)#java/util/Properties/Properties()
com/github/kristofa/brave/kafka/KafkaSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException()
com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/Builder/build()#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/Builder/build()#java/lang/String/isEmpty()
com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/Builder/build()#com/github/kristofa/brave/http/AutoValue_HttpSpanCollector_Config/AutoValue_HttpSpanCollector_Config(int,int,int)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/http/HttpResponse/getHttpStatusCode()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/KeyValueAnnotation/getValue()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#java/util/Collection/size()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#java/util/Iterator/next()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/KeyValueAnnotation/getKey()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#java/util/Collection/iterator()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#com/github/kristofa/brave/http/HttpClientResponseAdapter/responseAnnotations()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/nonSuccessResponse()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/setup()#com/github/kristofa/brave/http/HttpClientResponseAdapter/HttpClientResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/setup()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#com/github/kristofa/brave/http/HttpResponse/getHttpStatusCode()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#org/mockito/stubbing/OngoingStubbing/thenReturn(T)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#org/mockito/Mockito/when(T)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#java/util/Collection/isEmpty()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#org/junit/Assert/assertTrue(boolean)
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#com/github/kristofa/brave/http/HttpClientResponseAdapter/responseAnnotations()
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/http/HttpClientResponseAdapterTest/successResponse()#org/mockito/Mockito/verify(T)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#org/assertj/core/api/Assertions/assertThat(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#java/util/concurrent/atomic/AtomicInteger/get()
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#okhttp3/mockwebserver/MockResponse/setResponseCode(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#okhttp3/mockwebserver/MockResponse/MockResponse()
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#org/assertj/core/api/AbstractIntegerAssert/isEqualTo(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#okhttp3/mockwebserver/MockWebServer/enqueue(okhttp3.mockwebserver.MockResponse)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerErrors()#com/github/kristofa/brave/http/HttpSpanCollector/flush()
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#okhttp3/mockwebserver/MockWebServer/takeRequest()
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#okhttp3/mockwebserver/RecordedRequest/getBody()
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#okhttp3/mockwebserver/RecordedRequest/getHeader(java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#zipkin/Codec/readSpans(byte[])
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#com/github/kristofa/brave/http/HttpSpanCollectorTest/zipkinSpan(long,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#org/assertj/core/api/AbstractIterableAssert/containsExactly(T[])
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#okhttp3/mockwebserver/MockResponse/MockResponse()
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#org/assertj/core/api/Assertions/assertThat(java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#org/assertj/core/api/AbstractAssert/isEqualTo(java.lang.Object)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#org/assertj/core/api/Assertions/assertThat(java.util.List)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#okhttp3/mockwebserver/RecordedRequest/getRequestLine()
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#com/github/kristofa/brave/http/HttpSpanCollector/flush()
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#okhttp3/mockwebserver/MockWebServer/enqueue(okhttp3.mockwebserver.MockResponse)
com/github/kristofa/brave/http/HttpSpanCollectorTest/postsSpans()#okio/Buffer/readByteArray()
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectDoesntDoIO()#org/assertj/core/api/Assertions/assertThat(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectDoesntDoIO()#com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectDoesntDoIO()#org/assertj/core/api/AbstractIntegerAssert/isZero()
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectDoesntDoIO()#okhttp3/mockwebserver/MockWebServer/getRequestCount()
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectDoesntDoIO()#com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/zipkinSpan(long,java.lang.String)#zipkin/Span/Builder/Builder()
com/github/kristofa/brave/http/HttpSpanCollectorTest/zipkinSpan(long,java.lang.String)#zipkin/Span/Builder/traceId(long)
com/github/kristofa/brave/http/HttpSpanCollectorTest/zipkinSpan(long,java.lang.String)#zipkin/Span/Builder/build()
com/github/kristofa/brave/http/HttpSpanCollectorTest/zipkinSpan(long,java.lang.String)#zipkin/Span/Builder/id(long)
com/github/kristofa/brave/http/HttpSpanCollectorTest/zipkinSpan(long,java.lang.String)#zipkin/Span/Builder/name(java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#org/assertj/core/api/Assertions/assertThat(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#java/util/concurrent/atomic/AtomicInteger/get()
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#okhttp3/mockwebserver/MockResponse/MockResponse()
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#org/assertj/core/api/AbstractIntegerAssert/isEqualTo(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#okhttp3/mockwebserver/MockWebServer/enqueue(okhttp3.mockwebserver.MockResponse)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#okhttp3/mockwebserver/MockResponse/setSocketPolicy(okhttp3.mockwebserver.SocketPolicy)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/incrementsDroppedSpansWhenServerDisconnects()#com/github/kristofa/brave/http/HttpSpanCollector/flush()
com/github/kristofa/brave/http/HttpSpanCollectorTest/dropsWhenQueueIsFull()#org/assertj/core/api/Assertions/assertThat(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/dropsWhenQueueIsFull()#com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/http/HttpSpanCollectorTest/dropsWhenQueueIsFull()#java/util/concurrent/atomic/AtomicInteger/get()
com/github/kristofa/brave/http/HttpSpanCollectorTest/dropsWhenQueueIsFull()#org/assertj/core/api/AbstractIntegerAssert/isEqualTo(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/dropsWhenQueueIsFull()#com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectIncrementsAcceptedMetrics()#org/assertj/core/api/Assertions/assertThat(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectIncrementsAcceptedMetrics()#com/github/kristofa/brave/http/HttpSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectIncrementsAcceptedMetrics()#org/assertj/core/api/AbstractIntegerAssert/isEqualTo(int)
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectIncrementsAcceptedMetrics()#com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectIncrementsAcceptedMetrics()#java/util/concurrent/atomic/AtomicInteger/get()
com/github/kristofa/brave/http/HttpSpanCollectorTest/collectIncrementsAcceptedMetrics()#org/assertj/core/api/AbstractIntegerAssert/isZero()
com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/http/HttpSpanCollectorTest/span(long,java.lang.String)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/github/kristofa/brave/scribe/ScribeServer/getReceivedSpans()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#java/util/List/size()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#java/util/List/get(int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#com/github/kristofa/brave/scribe/ScribeSpanCollector/close()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollect()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/beforeClass()#com/github/kristofa/brave/scribe/ScribeServer/ScribeServer(int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/beforeClass()#com/github/kristofa/brave/scribe/ScribeServer/start()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/afterClass()#com/github/kristofa/brave/scribe/ScribeServer/stop()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testZipkinSpanCollector()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/github/kristofa/brave/scribe/ScribeServer/getReceivedSpans()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/getBinary_annotations()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#java/util/List/size()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#java/util/List/get(int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#org/junit/Assert/assertEquals(java.lang.String,long,long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/BinaryAnnotation/getValue()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/github/kristofa/brave/scribe/ScribeSpanCollector/addDefaultAnnotation(java.lang.String,java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/BinaryAnnotation/getKey()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/getName()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/github/kristofa/brave/scribe/ScribeSpanCollector/close()
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#java/lang/String/String(byte[])
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/testCollectWithDefaultAnnotation()#org/junit/Assert/assertEquals(java.lang.Object,java.lang.Object)
com/github/kristofa/brave/scribe/ScribeSpanCollectorTest/setup()#com/github/kristofa/brave/scribe/ScribeServer/clearReceivedSpans()
com/github/kristofa/brave/jaxrs2/BraveContainerRequestFilter/filter(javax.ws.rs.container.ContainerRequestContext)#com/github/kristofa/brave/http/HttpServerRequestAdapter/HttpServerRequestAdapter(com.github.kristofa.brave.http.HttpServerRequest,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/jaxrs2/BraveContainerRequestFilter/filter(javax.ws.rs.container.ContainerRequestContext)#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/jaxrs2/BraveContainerRequestFilter/filter(javax.ws.rs.container.ContainerRequestContext)#com/github/kristofa/brave/jaxrs2/JaxRs2HttpServerRequest/JaxRs2HttpServerRequest(javax.ws.rs.container.ContainerRequestContext)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#com/github/kristofa/brave/http/HttpClientRequestAdapter/HttpClientRequestAdapter(com.github.kristofa.brave.http.HttpClientRequest,com.github.kristofa.brave.http.ServiceNameProvider,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#com/github/kristofa/brave/NoAnnotationsClientResponseAdapter/getInstance()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#org/springframework/http/client/ClientHttpRequestExecution/execute(org.springframework.http.HttpRequest,byte[])
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#com/github/kristofa/brave/ClientRequestInterceptor/handle(com.github.kristofa.brave.ClientRequestAdapter)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#com/github/kristofa/brave/spring/SpringHttpResponse/SpringHttpResponse(int)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#com/github/kristofa/brave/spring/SpringHttpClientRequest/SpringHttpClientRequest(org.springframework.http.HttpRequest)
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#org/springframework/http/client/ClientHttpResponse/getRawStatusCode()
com/github/kristofa/brave/spring/BraveClientHttpRequestInterceptor/intercept(org.springframework.http.HttpRequest,byte[],org.springframework.http.client.ClientHttpRequestExecution)#com/github/kristofa/brave/http/HttpClientResponseAdapter/HttpClientResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeServer/ScribeServer(int)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeServer/getReceivedSpans()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/ScribeSpanCollectorParams()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeSpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeSpanCollector/ScribeSpanCollector(java.lang.String,int,com.github.kristofa.brave.scribe.ScribeSpanCollectorParams)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#java/util/List/size()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeSpanCollector/close()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeServer/stop()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#org/junit/Assert/assertEquals(long,long)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeSpanCollectorParams/setFailOnSetup(boolean)
com/github/kristofa/brave/scribe/ITScribeSpanCollectorFailOnSetup/testFailOnSetupFalse()#com/github/kristofa/brave/scribe/ScribeServer/start()
com/github/kristofa/brave/servlet/BraveServletFilter/getFilterName()#javax/servlet/FilterConfig/getFilterName()
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/http/HttpServerRequestAdapter/HttpServerRequestAdapter(com.github.kristofa.brave.http.HttpServerRequest,com.github.kristofa.brave.http.SpanNameProvider)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/ServerRequestInterceptor/handle(com.github.kristofa.brave.ServerRequestAdapter)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/ServerResponseInterceptor/handle(com.github.kristofa.brave.ServerResponseAdapter)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/servlet/ServletHttpServerRequest/ServletHttpServerRequest(javax.servlet.http.HttpServletRequest)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/servlet/BraveServletFilter/StatusExposingServletResponse/StatusExposingServletResponse(javax.servlet.http.HttpServletResponse)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/http/HttpServerResponseAdapter/HttpServerResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/servlet/BraveServletFilter/getAlreadyFilteredAttributeName()
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#javax/servlet/ServletRequest/getAttribute(java.lang.String)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#javax/servlet/FilterChain/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)#com/github/kristofa/brave/servlet/BraveServletFilter/doFilter(javax/servlet/ServletRequest,javax/servlet/ServletResponse,javax/servlet/FilterChain)/$anonymous1/()
com/github/kristofa/brave/servlet/BraveServletFilter/getAlreadyFilteredAttributeName()#com/github/kristofa/brave/servlet/BraveServletFilter/getFilterName()
com/github/kristofa/brave/servlet/BraveServletFilter/getAlreadyFilteredAttributeName()#java/lang/Class/getName()
com/github/kristofa/brave/servlet/BraveServletFilter/getAlreadyFilteredAttributeName()#java/lang/Object/getClass()
com/github/kristofa/brave/EmptySpanCollectorTest/testCollect()#com/github/kristofa/brave/EmptySpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/EmptySpanCollectorTest/testCollect()#org/mockito/Mockito/mock(java.lang.Class)
com/github/kristofa/brave/EmptySpanCollectorTest/testCollect()#org/mockito/Mockito/verifyNoMoreInteractions(java.lang.Object[])
com/github/kristofa/brave/EmptySpanCollectorTest/testCollect()#com/github/kristofa/brave/EmptySpanCollector/EmptySpanCollector()
com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/addDefaultAnnotation(java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException()
com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/toString()
com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/getInstance()#com/github/kristofa/brave/resteasy3/SpanCollectorForTesting/SpanCollectorForTesting()
com/twitter/zipkin/gen/Span/setTrace_id(long)#com/twitter/zipkin/gen/Span/setTrace_idIsSet(boolean)
com/twitter/zipkin/gen/Span/setTimestamp(long)#com/twitter/zipkin/gen/Span/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Span/isSetParent_id()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Span/setDebug(boolean)#com/twitter/zipkin/gen/Span/setDebugIsSet(boolean)
com/twitter/zipkin/gen/Span/fieldForId(int)#com/twitter/zipkin/gen/Span/_Fields/findByThriftId(int)
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getParent_id()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#java/lang/Long/valueOf(long)
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getTimestamp()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getName()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getDuration()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getTrace_id()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getAnnotations()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getId()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/getBinary_annotations()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isDebug()
com/twitter/zipkin/gen/Span/getFieldValue(com.twitter.zipkin.gen.Span._Fields)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/Span/hashCode()#com/twitter/zipkin/gen/Span/isSetDebug()
com/twitter/zipkin/gen/Span/hashCode()#com/twitter/zipkin/gen/Span/isSetBinary_annotations()
com/twitter/zipkin/gen/Span/hashCode()#com/twitter/zipkin/gen/Span/isSetName()
com/twitter/zipkin/gen/Span/hashCode()#com/twitter/zipkin/gen/Span/isSetAnnotations()
com/twitter/zipkin/gen/Span/hashCode()#java/util/List/add(E)
com/twitter/zipkin/gen/Span/hashCode()#com/twitter/zipkin/gen/Span/isSetDuration()
com/twitter/zipkin/gen/Span/hashCode()#com/twitter/zipkin/gen/Span/isSetParent_id()
com/twitter/zipkin/gen/Span/hashCode()#java/util/ArrayList/ArrayList()
com/twitter/zipkin/gen/Span/hashCode()#java/util/List/hashCode()
com/twitter/zipkin/gen/Span/hashCode()#com/twitter/zipkin/gen/Span/isSetTimestamp()
com/twitter/zipkin/gen/Span/isSetDebug()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Span/setDuration(long)#com/twitter/zipkin/gen/Span/setDurationIsSet(boolean)
com/twitter/zipkin/gen/Span/getAnnotationsIterator()#java/util/List/iterator()
com/twitter/zipkin/gen/Span/isSetTimestamp()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Span/setParent_idIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Span/getBinary_annotationsSize()#java/util/List/size()
com/twitter/zipkin/gen/Span/unsetDuration()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Span/unsetTrace_id()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Span/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/read(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/Span/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/Span/read(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/Span/read(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/Span/deepCopy()#com/twitter/zipkin/gen/Span/Span(com.twitter.zipkin.gen.Span)
com/twitter/zipkin/gen/Span/setDebugIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Span/setId(long)#com/twitter/zipkin/gen/Span/setIdIsSet(boolean)
com/twitter/zipkin/gen/Span/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/Span/writeObject(java.io.ObjectOutputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.OutputStream)
com/twitter/zipkin/gen/Span/writeObject(java.io.ObjectOutputStream)#com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/writeObject(java.io.ObjectOutputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/Span/setTimestampIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetName()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setDebug(boolean)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetAnnotations()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setDuration(long)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetDuration()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetTrace_id()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setId(long)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setAnnotations(java.util.List)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetId()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetParent_id()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setBinary_annotations(java.util.List)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetTimestamp()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetBinary_annotations()
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setParent_id(long)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/twitter/zipkin/gen/Span/setFieldValue(com.twitter.zipkin.gen.Span._Fields,java.lang.Object)#com/twitter/zipkin/gen/Span/unsetDebug()
com/twitter/zipkin/gen/Span/unsetId()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Span/addToAnnotations(com.twitter.zipkin.gen.Annotation)#java/util/ArrayList/ArrayList()
com/twitter/zipkin/gen/Span/addToAnnotations(com.twitter.zipkin.gen.Annotation)#java/util/List/add(E)
com/twitter/zipkin/gen/Span/unsetParent_id()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Span/setDurationIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)#java/util/ArrayList/ArrayList()
com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)#java/util/List/add(E)
com/twitter/zipkin/gen/Span/setTrace_idIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Span/setName(java.lang.String)#java/lang/String/toLowerCase()
com/twitter/zipkin/gen/Span/unsetDebug()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/SchemeFactory/getScheme()
com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)#java/util/Map/get(java.lang.Object)
com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/scheme/IScheme/write(org.apache.thrift.protocol.TProtocol,T)
com/twitter/zipkin/gen/Span/write(org.apache.thrift.protocol.TProtocol)#org/apache/thrift/protocol/TProtocol/getScheme()
com/twitter/zipkin/gen/Span/equals(java.lang.Object)#com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)
com/twitter/zipkin/gen/Span/getBinary_annotationsIterator()#java/util/List/iterator()
com/twitter/zipkin/gen/Span/toString()#com/twitter/zipkin/gen/Span/isSetParent_id()
com/twitter/zipkin/gen/Span/toString()#com/twitter/zipkin/gen/Span/isSetDebug()
com/twitter/zipkin/gen/Span/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
com/twitter/zipkin/gen/Span/toString()#com/twitter/zipkin/gen/Span/isSetDuration()
com/twitter/zipkin/gen/Span/toString()#java/lang/StringBuilder/append(java.lang.Object)
com/twitter/zipkin/gen/Span/toString()#java/lang/StringBuilder/toString()
com/twitter/zipkin/gen/Span/toString()#java/lang/StringBuilder/append(java.lang.String)
com/twitter/zipkin/gen/Span/toString()#com/twitter/zipkin/gen/Span/isSetTimestamp()
com/twitter/zipkin/gen/Span/toString()#java/lang/StringBuilder/append(boolean)
com/twitter/zipkin/gen/Span/toString()#java/lang/StringBuilder/append(long)
com/twitter/zipkin/gen/Span/unsetTimestamp()#org/apache/thrift/EncodingUtils/clearBit(byte,int)
com/twitter/zipkin/gen/Span/readObject(java.io.ObjectInputStream)#org/apache/thrift/protocol/TCompactProtocol/TCompactProtocol(org.apache.thrift.transport.TTransport)
com/twitter/zipkin/gen/Span/readObject(java.io.ObjectInputStream)#com/twitter/zipkin/gen/Span/read(org.apache.thrift.protocol.TProtocol)
com/twitter/zipkin/gen/Span/readObject(java.io.ObjectInputStream)#org/apache/thrift/transport/TIOStreamTransport/TIOStreamTransport(java.io.InputStream)
com/twitter/zipkin/gen/Span/readObject(java.io.ObjectInputStream)#java/io/IOException/IOException(java.lang.Throwable)
com/twitter/zipkin/gen/Span/isSetDuration()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Span/getAnnotationsSize()#java/util/List/size()
com/twitter/zipkin/gen/Span/isSetTrace_id()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/twitter/zipkin/gen/Span/setIdIsSet(boolean)#org/apache/thrift/EncodingUtils/setBit(byte,int,boolean)
com/twitter/zipkin/gen/Span/clear()#com/twitter/zipkin/gen/Span/setParent_idIsSet(boolean)
com/twitter/zipkin/gen/Span/clear()#com/twitter/zipkin/gen/Span/setTimestampIsSet(boolean)
com/twitter/zipkin/gen/Span/clear()#com/twitter/zipkin/gen/Span/setDurationIsSet(boolean)
com/twitter/zipkin/gen/Span/clear()#com/twitter/zipkin/gen/Span/setTrace_idIsSet(boolean)
com/twitter/zipkin/gen/Span/clear()#com/twitter/zipkin/gen/Span/setIdIsSet(boolean)
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetParent_id()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetDebug()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetBinary_annotations()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetName()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetAnnotations()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetDuration()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetTrace_id()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#java/lang/IllegalArgumentException/IllegalArgumentException()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetId()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#java/lang/IllegalStateException/IllegalStateException()
com/twitter/zipkin/gen/Span/isSet(com.twitter.zipkin.gen.Span._Fields)#com/twitter/zipkin/gen/Span/isSetTimestamp()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#java/lang/Object/equals(java.lang.Object)
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDebug()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetTimestamp()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetBinary_annotations()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#java/lang/String/compareTo(java.lang.String)
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetName()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#java/lang/Boolean/compareTo(java.lang.Boolean)
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#java/lang/Class/getName()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#java/lang/Boolean/valueOf(boolean)
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetAnnotations()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDuration()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetTrace_id()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetId()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#org/apache/thrift/TBaseHelper/compareTo(boolean,boolean)
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetParent_id()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#org/apache/thrift/TBaseHelper/compareTo(java.lang.String,java.lang.String)
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#org/apache/thrift/TBaseHelper/compareTo(long,long)
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#java/lang/Object/getClass()
com/twitter/zipkin/gen/Span/compareTo(com.twitter.zipkin.gen.Span)#org/apache/thrift/TBaseHelper/compareTo(java.util.List,java.util.List)
com/twitter/zipkin/gen/Span/setParent_id(long)#com/twitter/zipkin/gen/Span/setParent_idIsSet(boolean)
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetParent_id()
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDebug()
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetTimestamp()
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetBinary_annotations()
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetName()
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#java/lang/String/equals(java.lang.Object)
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetAnnotations()
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/isSetDuration()
com/twitter/zipkin/gen/Span/equals(com.twitter.zipkin.gen.Span)#java/util/List/equals(java.lang.Object)
com/twitter/zipkin/gen/Span/isSetId()#org/apache/thrift/EncodingUtils/testBit(byte,int)
com/github/kristofa/brave/spring/SpanCollectorForTesting/addDefaultAnnotation(java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException()
com/github/kristofa/brave/spring/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/logging/Logger/info(java.lang.String)
com/github/kristofa/brave/spring/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#com/twitter/zipkin/gen/Span/toString()
com/github/kristofa/brave/spring/SpanCollectorForTesting/collect(com.twitter.zipkin.gen.Span)#java/util/List/add(E)
com/github/kristofa/brave/spring/SpanCollectorForTesting/getInstance()#com/github/kristofa/brave/spring/SpanCollectorForTesting/SpanCollectorForTesting()
com/github/kristofa/brave/spring/SpanCollectorForTesting/clear()#java/util/List/clear()
com/github/kristofa/brave/InetAddressResolverTest/testResolvingInetAddressDoesNotThrowException()#org/junit/Assert/assertNotNull(java.lang.Object)
com/github/kristofa/brave/InetAddressResolverTest/testResolvingInetAddressDoesNotThrowException()#java/net/InetAddress/getHostAddress()
com/github/kristofa/brave/InetAddressResolverTest/testResolvingInetAddressDoesNotThrowException()#com/github/kristofa/brave/InetAddressUtilities/getLocalHostLANAddress()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)#java/lang/System/nanoTime()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)#com/github/kristofa/brave/LocalTracer/spanAndEndpoint()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)#com/github/kristofa/brave/AnnotationSubmitter/currentTimeMicroseconds()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)#com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String)#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/span()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#java/lang/Boolean/equals(java.lang.Object)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/Span/setTimestamp(long)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/endpoint()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/SpanId/getSpanId()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/Span/setTrace_id(long)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/BinaryAnnotation/BinaryAnnotation(java.lang.String,java.lang.String,com.twitter.zipkin.gen.Endpoint)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/Span/addToBinary_annotations(com.twitter.zipkin.gen.BinaryAnnotation)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/Span/setName(java.lang.String)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/SpanId/getTraceId()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/Span/Span()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/Span/setParent_id(long)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/LocalTracer/traceSampler()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/twitter/zipkin/gen/Span/setId(long)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/SpanId/getParentSpanId()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/LocalTracer/spanAndEndpoint()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/Sampler/isSampled(long)
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/CommonSpanState/sample()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/LocalTracer/getNewSpanId()
com/github/kristofa/brave/LocalTracer/startNewSpan(java.lang.String,java.lang.String,long)#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/state()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/github/kristofa/brave/ServerSpan/getSpan()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/github/kristofa/brave/LocalTracer/randomGenerator()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/twitter/zipkin/gen/Span/getId()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/github/kristofa/brave/ServerSpanState/getCurrentServerSpan()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/github/kristofa/brave/LocalTracer/spanAndEndpoint()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#java/util/Random/nextLong()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/twitter/zipkin/gen/Span/getTrace_id()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/state()
com/github/kristofa/brave/LocalTracer/getNewSpanId()#com/github/kristofa/brave/SpanId/create(long,long,java.lang.Long)
com/github/kristofa/brave/LocalTracer/builder(com.github.kristofa.brave.LocalTracer)#com/github/kristofa/brave/AutoValue_LocalTracer/Builder/Builder(com.github.kristofa.brave.LocalTracer)
com/github/kristofa/brave/LocalTracer/builder()#com/github/kristofa/brave/AutoValue_LocalTracer/Builder/Builder()
com/github/kristofa/brave/LocalTracer/finishSpan()#java/lang/System/nanoTime()
com/github/kristofa/brave/LocalTracer/finishSpan()#com/twitter/zipkin/gen/Span/getTimestamp()
com/github/kristofa/brave/LocalTracer/finishSpan()#com/github/kristofa/brave/LocalTracer/finishSpan(long)
com/github/kristofa/brave/LocalTracer/finishSpan()#com/github/kristofa/brave/LocalTracer/spanAndEndpoint()
com/github/kristofa/brave/LocalTracer/finishSpan()#com/github/kristofa/brave/AnnotationSubmitter/currentTimeMicroseconds()
com/github/kristofa/brave/LocalTracer/finishSpan()#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/span()
com/github/kristofa/brave/LocalTracer/finishSpan(long)#com/github/kristofa/brave/LocalSpanState/setCurrentLocalSpan(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracer/finishSpan(long)#com/github/kristofa/brave/LocalTracer/spanAndEndpoint()
com/github/kristofa/brave/LocalTracer/finishSpan(long)#com/github/kristofa/brave/LocalTracer/spanCollector()
com/github/kristofa/brave/LocalTracer/finishSpan(long)#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/span()
com/github/kristofa/brave/LocalTracer/finishSpan(long)#com/github/kristofa/brave/SpanAndEndpoint/LocalSpanAndEndpoint/state()
com/github/kristofa/brave/LocalTracer/finishSpan(long)#com/github/kristofa/brave/SpanCollector/collect(com.twitter.zipkin.gen.Span)
com/github/kristofa/brave/LocalTracer/finishSpan(long)#com/twitter/zipkin/gen/Span/setDuration(long)
com/github/kristofa/brave/jaxrs2/JaxRs2HttpResponse/getHttpStatusCode()#javax/ws/rs/client/ClientResponseContext/getStatus()
com/github/kristofa/brave/jersey/JerseyHttpResponse/getHttpStatusCode()#com/sun/jersey/api/client/ClientResponse/getStatus()
com/github/kristofa/brave/BraveCallable/call()#com/github/kristofa/brave/BraveCallable/wrappedCallable()
com/github/kristofa/brave/BraveCallable/call()#com/github/kristofa/brave/BraveCallable/serverSpanThreadBinder()
com/github/kristofa/brave/BraveCallable/call()#com/github/kristofa/brave/ServerSpanThreadBinder/setCurrentSpan(com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/BraveCallable/call()#com/github/kristofa/brave/BraveCallable/currentServerSpan()
com/github/kristofa/brave/BraveCallable/call()#java/util/concurrent/Callable/call()
com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)#com/github/kristofa/brave/ServerSpanThreadBinder/getCurrentServerSpan()
com/github/kristofa/brave/BraveCallable/create(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder)#com/github/kristofa/brave/AutoValue_BraveCallable/AutoValue_BraveCallable(java.util.concurrent.Callable,com.github.kristofa.brave.ServerSpanThreadBinder,com.github.kristofa.brave.ServerSpan)
com/github/kristofa/brave/httpclient/BraveHttpResponseInterceptor/process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)#com/github/kristofa/brave/http/HttpClientResponseAdapter/HttpClientResponseAdapter(com.github.kristofa.brave.http.HttpResponse)
com/github/kristofa/brave/httpclient/BraveHttpResponseInterceptor/process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)#com/github/kristofa/brave/ClientResponseInterceptor/handle(com.github.kristofa.brave.ClientResponseAdapter)
com/github/kristofa/brave/httpclient/BraveHttpResponseInterceptor/process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)#com/github/kristofa/brave/httpclient/HttpClientResponseImpl/HttpClientResponseImpl(org.apache.http.HttpResponse)
